Anger,Sad,Fear,Joy,Comments
0,0,0,0,"you only need the `on-input` event handlers if you need to keep the component state synchronized with the input fields. this can be helpful you need to show validation errors as the user is typing. if you don't need that then you can just assign keys and use `getel()` in `postsubmit()`:```js  postsubmit() {    axios.post('/api/v1/customers', {        firstname: this.getel('firstname').value,        // ...    })      .then(function (response) {        console.log(response);      })    .catch(function (error) {      console.log(error);    });  }```  yes @brrritscold, i think it is better to be explicit about what data is being sent to the backend. this allows you to put other things into `this.state` without worrying about it being submitted to the server.  there's no ""right"" answer, but the redux documentation has some good advice on organizing state: https://redux.js.org/docs/faq/organizingstate.htmlif you do decide to use redux, i would recommend a new library: https://github.com/charlieduong94/marko-reduxhope that helps!"
0,0.3,0,0.1,"@charlang thanks for the report. this looks like a bug and i should have a fix up sometime this morning.    @charlang after looking at the code a bit more, i have a few questions:1. did you mean that `object.assign` was getting sent down to the browser (not template literals)?2. this code should only get sent to the browser if you're using a `html-element.json` to define an [html custom element](https://developer.mozilla.org/en-us/docs/web/web_components/custom_elements). if so, custom elements are only supported in modern browsers, which also would include template literal support and `object.assign` support. are you using html custom elements?could you also send me an example of a component that is sending this code to the browser?thanks!"
0,0,0,0,"for your question no.1,  looks like it's template literals issue: https://developer.mozilla.org/en-us/docs/web/javascript/reference/template_literalsfor question no.2,  below is the generated code, looks like we are not using  html custom elements:/** * internal helper method to insert a script tag that assigns properties * to the dom node the precede it. */var escapescript = exports.xs;var assignpropsfunction = `    function ap_(p) {        var s = document.currentscript;        object.assign(s.previoussibling, p);        s.parentnode.removechild(s);    }`.replace(/\s+/g, ' ').replace(/([\w]) (.)/g, '$1$2').replace(/(.) ([\w])/g, '$1$2').trim();exports.p = function propsforpreviousnode(props, out) {    var cspnonce = out.global.cspnonce;    var nonceattr = cspnonce ? ' nonce=' + json.stringify(cspnonce) : '';    out.w('<script' + nonceattr + '>');    if (!out.global.assignpropsfunction) {        out.w(assignpropsfunction);        out.global.assignpropsfunction = true;    }    out.w('ap_(' + escapescript(json.stringify(props)) + ');</script>');};"
0,0,0,0.4,glad you were able to work it out @charlang. let us know if you see any other issues.
0,0,0.2,0,"[![cla assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/marko-js/marko?pullrequest=968) <br/>thank you for your submission, we really appreciate it. like many open source projects, we ask that you all sign our [contributor license agreement](https://cla.js.foundation/marko-js/marko?pullrequest=968) before we can accept your contribution.<br/>**1** out of **2** committers have signed the cla.<br/><br/>:white_check_mark: scttdavs<br/>:x: scott davis<hr/>**scott davis** seems not to be a github user. you need a github account to be able to sign the cla. if you have already a github account, please [add the email address used for this commit to your account](https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/#commits-are-not-linked-to-any-user)."
0,0,0,0,i've been away on another project for a while and just getting back to the project where we use marko. i have absolutely no idea what has changed since the version we are currently using (4.5.3). seems strange that so many releases have happen with no indication what was added/removed/fixed :( is there a blog post or anything?
0,0.2,0.1,0,"you can modify specific directories for `browser-refresh` to watch, by using a `.browser-refresh` configuration file.as an example, i have linked private npm packages and will watch for changes in those specific directories as well: ```{    ""watch"": [        ""./site/"",        ""./node_modules/@ranku/node-base/""    ],    ""usepolling"": false}```"
0,0,0,0,i am getting a similar error using marko 4.7.4```typeerror: cannot read property 'nextsibling' of null  at ___foreachnode(turbo-8b8dbcb21bab1dc990eb.js:9541:1)  at ___detach(turbo-8b8dbcb21bab1dc990eb.js:9532:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3721:1)  at insertvirtualnodebefore(turbo-8b8dbcb21bab1dc990eb.js:3546:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3778:1)  at insertvirtualnodebefore(turbo-8b8dbcb21bab1dc990eb.js:3546:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3778:1)  at insertvirtualnodebefore(turbo-8b8dbcb21bab1dc990eb.js:3546:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3778:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphcomponent(turbo-8b8dbcb21bab1dc990eb.js:3609:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3727:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphcomponent(turbo-8b8dbcb21bab1dc990eb.js:3609:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3727:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphel(turbo-8b8dbcb21bab1dc990eb.js:3979:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3758:1)  at morphcomponent(turbo-8b8dbcb21bab1dc990eb.js:3609:1)  at morphchildren(turbo-8b8dbcb21bab1dc990eb.js:3727:1)  at morphdom(turbo-8b8dbcb21bab1dc990eb.js:3988:1)  at func(turbo-8b8dbcb21bab1dc990eb.js:9522:1)  at ___batchupdate(turbo-8b8dbcb21bab1dc990eb.js:10613:1)  at ___rerender(turbo-8b8dbcb21bab1dc990eb.js:9505:1)  at ___update(turbo-8b8dbcb21bab1dc990eb.js:9461:1)  at updatecomponents(turbo-8b8dbcb21bab1dc990eb.js:10594:1)  at e(turbo-8b8dbcb21bab1dc990eb.js:10566:1)  at apply(turbo-8b8dbcb21bab1dc990eb.js:4294:1)  at e(app.js:13324:1)```it is not something i can reproduce easily as it doesn't always happen with the same behaviour.  i have logs in sentry recording that this is happening periodically.  my case is not related to hydrating the rendering on the server.
0,0,0,0.2,`asyncstream` has the same issue: https://github.com/marko-js/marko/blob/bcecb400778ec30fcc88075bd8276b4c83236d9c/src/runtime/html/asyncstream.js#l441-l443
0,0,0,0,the changelog is up to date now. let us know if you have any additional questions. thanks!
0,0.1,0.2,0,1
0,0,0,0,have the same issue. resolved to using `getelid` which doesn't seem to have the same bug.![image](https://user-images.githubusercontent.com/116520/35244857-f145391c-ffc1-11e7-8ac7-df706b0c013e.png)
0,0,0,0.1,"while this is not a complete answer, you should have a look at https://markojs.com/docs/components/#split-components to start.  also the docs for https://markojs.com/docs/server-side-rendering/ can also be useful.to try and answer your scenario, i'll explain one way i have done it. when i want something to only render in the browser, but not the server, i use a webpack environment variable of  __browser__ to flag content to be excluded from the code for my server-side build. note that to do this, it requires that both your server-side and browser-side code needs to be compiled as two separate outputs (which is useful anyway since the compiled server-side code can be slightly faster). then you use the one to be run on the server, and other to be used for the browser rendering. hope that makes sense.the ""top level component"" is basically whatever you would call your ""app"" component, it's the parent component that is called first, which then includes all the other components. it's the highest component in your component hierarchy. so, it's whatever tag you require in and use .render() on to start the whole marko rendering process.i should also mention that, unless you use something like split components, or do flagging as i mentioned above, browser side and server side rendering use the exact same components. they are pretty much interchangeable. it's more about when you want the specific functionality of __only__ to render on one side or the other that there's a difference.  i'll also just add that ""above-the-fold"" is a very hard thing to nail down statically on the server-side since the concept of ""the fold"" is dependant on the device, screen orientation, aspect ratio and many more factors. you'll like find that you need to decide on some acceptable base height to make that call. and if the content of the components above the fold has dynamic content, thereby making their rendered height variable, the task is even harder. not trying to rain on your parade, but i have tried to go down that road and it's a much tougher task than you might think since the server side has no information about the client or its dimensions. at least not without something rendering first and passing that info back.  i can't speak to anything official, but to answer the question of ""how are we using it without a router or data library"", the short answer is we built our own. not ideal, but on the flip side we could write exactly what we needed, and nothing more. which we found to be a benefit as we are super sensitive to bundle file size. not using a package that is trying to be all things to all people was actually better for us. i know that doesn't address the topic but just providing an answer on how others (we) use marko without these things being available. i do agree that having an official one would be helpful, even if it only served as a guide to how we could hook the router deeper into marko, rather than as a layer on top."
0,0.2,0.2,0,"i like the look of where this is going.one nice addition would be a custom component that abstracts the data-exportsi.e. something that could use like this ```htmlclass {  oncrate() {    this.state = {data:null}  }   ondata(data) {    this.state.data = data  }}<serverdata on-data('ondata')/>```or better still when https://github.com/marko-js/marko/issues/656 is resolved, something like :```html<serverdata | (data)>  ${data}</serverdata>```  i prefer to have the argument names defined inside the taganyone have an idea about other ways to do it ?what about using a pipe  to delimit the input args from the output arg namesfor example :```html<tagname inputarg1=inputvalue1 | ourputvar1>  ${outputvar1}</tagname><ul>  <for(colors) | color>    <li>${color}</li>  </for></ul><list items=input.items>    <@item | item>        ${item.name}    </@item></list>could use brackets around the output parameter names if there are more than 1<foreachentryinmap map=map | (key, value) >   ${key} ${value}</foreachentryinmap>```food for thought"
0,0,0,0,@mlrawlings i am facing the same issue. how about using **process.platform** to check win or mac to fix this issue?. i can give it a try.
0,0.2,0.2,0,"after installing the following:```npm install lasso-markonpm install @lasso/marko-taglib```i get the following error:```render error. exception: error: error while applying option of ""plugin"". cause: error: plugin module not found for ""minprops/lasso"". searched from ""/home/karl/dev/node/psycat""    at object.plugin (/home/karl/dev/node/psycat/node_modules/lasso/src/config-loader.js:292:43)    at invokehandlers (/home/karl/dev/node/psycat/node_modules/property-handlers/lib/index.js:72:29)    at object.plugins (/home/karl/dev/node/psycat/node_modules/lasso/src/config-loader.js:285:21)    at invokehandlers (/home/karl/dev/node/psycat/node_modules/property-handlers/lib/index.js:72:29)    at object.load (/home/karl/dev/node/psycat/node_modules/lasso/src/config-loader.js:381:5)    at create (/home/karl/dev/node/psycat/node_modules/lasso/src/index.js:49:31)    at object.getdefaultlasso (/home/karl/dev/node/psycat/node_modules/lasso/src/index.js:70:24)    at getlassorendercontext (/home/karl/dev/node/psycat/node_modules/@lasso/marko-taglib/taglib/getlassorendercontext.js:10:22)    at render (/home/karl/dev/node/psycat/node_modules/@lasso/marko-taglib/taglib/config-tag.js:5:28)    at wrappedrenderer (/home/karl/dev/node/psycat/node_modules/marko/src/runtime/helpers.js:106:13) (config.plugins)    at error (/home/karl/dev/node/psycat/node_modules/property-handlers/lib/index.js:33:17)    at invokehandlers (/home/karl/dev/node/psycat/node_modules/property-handlers/lib/index.js:75:17)    at object.plugins (/home/karl/dev/node/psycat/node_modules/lasso/src/config-loader.js:285:21)    at invokehandlers (/home/karl/dev/node/psycat/node_modules/property-handlers/lib/index.js:72:29)    at object.load (/home/karl/dev/node/psycat/node_modules/lasso/src/config-loader.js:381:5)    at create (/home/karl/dev/node/psycat/node_modules/lasso/src/index.js:49:31)    at object.getdefaultlasso (/home/karl/dev/node/psycat/node_modules/lasso/src/index.js:70:24)    at getlassorendercontext (/home/karl/dev/node/psycat/node_modules/@lasso/marko-taglib/taglib/getlassorendercontext.js:10:22)    at render (/home/karl/dev/node/psycat/node_modules/@lasso/marko-taglib/taglib/config-tag.js:5:28)    at wrappedrenderer (/home/karl/dev/node/psycat/node_modules/marko/src/runtime/helpers.js:106:13)```about the documentation. i feel like yous have written far too much to be able to maintain. perhaps just keep all of the documentation in one repo.did any deprecations happen to anything when upgrading from lasso v2 to v3?"
0,0,0.1,0,"hey, any updates on this? it seems like this affects also `input` parameters (passed by <@param> tag) which get lost after state update. is there a workaround for now?"
0,0,0,0,"if the former is used, then we have to show the depreciation warning right?. can i take this one?."
0,0,0,0.4,[![coverage status](https://coveralls.io/builds/15406226/badge)](https://coveralls.io/builds/15406226)coverage decreased (-0.02%) to 90.469% when pulling **fe3fa884dd36fc8e9885084b0bcbcefad9d2c787 on wip-test-perf** into **4d11fa6802069039cfea9d1ecfa5f338baf5833a on master**.  [![coverage status](https://coveralls.io/builds/15353062/badge)](https://coveralls.io/builds/15353062)coverage decreased (-4.4%) to 86.001% when pulling **e80fd462b5f7eeb142a6e162cf12f88cdda74d1f on wip-test-perf** into **74f6dcd3fa7d211445c9b79dc4a7a1a72b2c5ebb on master**.  [![coverage status](https://coveralls.io/builds/15337474/badge)](https://coveralls.io/builds/15337474)coverage increased (+0.003%) to 90.403% when pulling **919883cc4174c80a1bbf2b302f3ffc65a08e60f2 on legacy-fixes** into **74f6dcd3fa7d211445c9b79dc4a7a1a72b2c5ebb on master**.
0.1,0,0,0,"it would be nice. i find myself using the equvient with vuejs from time to time.for reference, here's the vue implementation: <https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js>.and the vue api documentation: <https://vuejs.org/v2/api/#vue-nexttick>."
0,0.7,0.2,0,"there is already a native promise test, so if we don't want to test against `bluebird`, we should just remove these tests.  we should also probably remove the `q` test (which [used to](https://github.com/marko-js/marko/commit/3010570502cf1c1020e382850645cc5b4ae55874#diff-2f5a424c5dd4bc2c257b60fd9fce8d60) test against `raptor-promises`)"
0,0,0,0,i met this bug by too many times 😞
0,0,0,0.1,[![cla assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/marko-js/marko?pullrequest=986) <br/>all committers have signed the cla.
0,0,0,0,"i just had a thought... could i generate different code in the transformer for server vs browser. - have the server as i have done, and some how make the client version just strip out the html attribute.but then how could i make the client preserve the dom that the server rendered ?"
0,0,0,0,[![coverage status](https://coveralls.io/builds/15569275/badge)](https://coveralls.io/builds/15569275)coverage increased (+0.02%) to 90.487% when pulling **d6eb33d8998a48a6329bfe0e4402909d661175d9 on scttdavs:master** into **ecc7763f26d8cb25f13319b7f4bcea7c6171645a on marko-js:master**.  [![coverage status](https://coveralls.io/builds/15551123/badge)](https://coveralls.io/builds/15551123)coverage decreased (-0.2%) to 90.29% when pulling **62ee3e5c5abf3cad92a0109a98672d7d7f37835d on remove-lasso** into **ecc7763f26d8cb25f13319b7f4bcea7c6171645a on master**.  [![coverage status](https://coveralls.io/builds/15551123/badge)](https://coveralls.io/builds/15551123)coverage decreased (-0.2%) to 90.29% when pulling **62ee3e5c5abf3cad92a0109a98672d7d7f37835d on remove-lasso** into **ecc7763f26d8cb25f13319b7f4bcea7c6171645a on master**.  [![coverage status](https://coveralls.io/builds/15573968/badge)](https://coveralls.io/builds/15573968)coverage decreased (-0.2%) to 90.29% when pulling **25ae8b47281acfc1a9cc0733f38b78b524038bef on remove-lasso** into **ecc7763f26d8cb25f13319b7f4bcea7c6171645a on master**.
0,0,0,0,"this solution only partially solves the problem.for example, i have a framework that adds some animation classes when you focus on input fields. it listens to the focus in event, and when my component states change, my fields flash"
0,0,0,0,[![cla assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/marko-js/marko?pullrequest=992) <br/>all committers have signed the cla.
0,0,0,0,thanks again!
0,0,0,0,"thanks for the pr @scttdavs, everything looks good! going to create a release shortly."
0,0,0,0,[![coverage status](https://coveralls.io/builds/15659753/badge)](https://coveralls.io/builds/15659753)coverage increased (+0.04%) to 90.351% when pulling **4090fff681a0640bf9999d4ab719e261cb36e291 on hydrate-tests** into **59cb8e746d8d7e9bf65a332555f63e62f282c35c on master**.
0,0,0,0,"hey michael, thanks for the response. glad to hear i'm not the only one thinking on these things. i'll admit, i was a bit frustrated yesterday when i wrote the above (after banging my head against the wall for about 5 hours), so please take it with a grain of salt. on the events, i don't disagree. i just constantly find use-cases where i have to write a lot of boilerplate in order to accomplish something fairly simple (in my opinion). i think option 2 in my example is actually a much better approach. by giving the parent component the ability to listen to child events when transclusion is used, you accomplish exactly what you would do if tab component lived explicitly inside the tablist component's template, rather than it being passed in as bodyrenderer. i keep tripping up on this because the `<include>` should be able to be treated exactly as if i had placed `<tab>` in the template instead of `<include>`.  if you could at least listen to events on the `<include(input.renderbody) on-click('setclicked')>` that would go a long way to being able to keep that state logic inside tablist, instead of outside of it. this is what i was trying to understand yesterday, why does the event emitted by ""tab"" not get captured by the `<include/>` tag - i'm still trying to figure that one out, it seems that the tag just passes a multi-dimensional array [['click', 'click',false]]  but never triggers the listener attached to it. on the contribution question, i do want to contribute and i am more than willing to make the changes i have talked about, but it's very difficult right now to narrow down specific questions i could ask. some of the things i would like to contribute seem to be spread across many, many areas of the code base so i don't really have a firm enough grasp of all the internals to not just ask ""how do i do this?"" :) i'm trying to get there, but time is always my enemy as i have an entire team of dev's just trying to build stuff, so i can only poke around the code now and then (i'm sure we have all been there). i think if someone could put together even a high-level diagram of the different steps (code/location) that the build and then runtime goes through, it could go a long way into helping people better understand the codebase. even at a high-level something like## build time1. parse file to ast2. load/find taglibs3. transform ast4. call all transformers for components5. code gen6. call all component builder files7. code write8. donesome details around how things like `codegen.addstaticvar` or `builder.require` contribute to the final built file would also be helpful. i understand it at a high level, but i don't have a deep enough understanding yet how that may affect the final outcome of the built file. the specific order of operations is still a bit fuzzy. also, details around the differences between things like `builder`, `codegen`, `transform`, and so on would help. right now, most of what i have learned has been from reading the taglibs/core directory but figuring out exactly when each of those is called and how they relate to things defined in the 'marko.json' file (node-factory, code-generator, transform, renderer, autocomplete??) is also unclear - and by unclear i mean the timing and what affect it has on the outcome. i'm sure it all makes sense to the marko folks, but from the outside it's a lot to try and wrap your head around when we don't have an in-house expert to poke for questions :)funny story, i actually had one of my dev's say to me the other day, ""why does marko only allow two kinds of attributes for custom components, 'string' and 'expression'? i really want to use a boolean!"" i said, ""what do you mean? you can use boolean, integer and more!"" then he sent me [this link](https://markojs.com/docs/custom-tags/#defining-attributes) and i realized he had no way of knowing those things existed. i knew because i had been through the code. :) i think i'll submit an update for the doc later today lol.## runtime1. server render2. hydration3. vdom4. resolutionetcetc.(i've not spent as much time in this area as i have trying to understand the compile process, so it's still fuzzy to me.)anyway, just a thought. i might try to take a stab at it, and just get you guys to review/edit it."
0,0,0,0,[![cla assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/marko-js/marko?pullrequest=1002) <br/>all committers have signed the cla.
0,0,0,0,"hey @gunjam. thanks for reporting this issue. someone will take a look at this soon. in the meantime, you can still use `${attrs}` even though it's labeled as deprecated."
0,0,0,0,ta!
0,0.002235294,0,0.007137255,"for reference if anyone is interested there's also another head-to-head benchmark over at <http://www.stefankrause.net/js-frameworks-benchmark7/table.html>. plus repo at <https://github.com/krausest/js-framework-benchmark>.it's particularly interesting as the results are very different to the benchmarks presented on markojs.com, in this benchmark marko actually falls below many of the popular frameworks.there's likely opportunity to improve the code over at that benchmark too (for example to submit a non-keyed version)."
0,0,0,0,[![coverage status](https://coveralls.io/builds/15786482/badge)](https://coveralls.io/builds/15786482)coverage increased (+0.02%) to 90.368% when pulling **da2b09b33ff59c887ea4bad8a54f19e7e0718333 on hydrate-fixes** into **ddca804915121a9f87e5c91653ce1e08615cbda9 on master**.
0,0,0,0,[![coverage status](https://coveralls.io/builds/15786773/badge)](https://coveralls.io/builds/15786773)coverage decreased (-0.02%) to 90.334% when pulling **b65d1a24e33aaaacd67731cc43e48f6096bd05fb on vdom-deps** into **ddca804915121a9f87e5c91653ce1e08615cbda9 on master**.
0,0,0,0,"@jasonmacdonald neither solution work, unfortunately, resulting in the same error."
0,0,0,0,"hey @pranavjha, just trying to understand:  you're trying to get `lasso-babel-transform` to compile `marko` with the `es2015` preset?that shouldn't be necessary as the runtime code that's sent to the browser should be compatible with all major browsers back to ie9.  if that's not the case, open an issue for the problem you're seeing and we can address that.in the meantime, `lasso-babel-transform` supports [global options](https://github.com/lasso-js/lasso-babel-transform#global-babel-options) for using a single babel config for everything.  i'm not sure the [lookup behavior](https://babeljs.io/docs/usage/babelrc/#lookup-behavior) in `lasso-babel-transform` is implemented the way it should be (what @jasonmacdonald described), so that might need to be looked at as well.  that would be great! but i'm still curious why you need to run babel on marko.  closed via #1013 and published in `4.9.1`  my best guess is this is getting picked up as an attribute argument like `<div if(true)>` or `<li for(x in y)>` and not being handled correctly.  @kb-xluo marko picks up and adds the registration code for any components that it can discover statically at compile time.  when passing dynamic components, it obviously can't do this.but components templates do include the code to register themselves when required so if the template is run, it will register itself.  you should be able to add `""run"": true` to the `browser.json` entry for your component to get it to register itself.i'm going to close this, but if you have more questions we can talk here and reopen if necessary.  thanks @budden!  this does indeed look like the right fix.  before merging, i'd like to add a test to cover this change and i think it will hit this code path with a custom tag that uses [`import-var`](https://github.com/lasso-js/lasso/blob/v2/marko.json#l30-l33).  is this something you could take a look at adding a test for?  i've just updated the [contributing](https://github.com/marko-js/marko/blob/master/.github/contributing.md#adding-tests) guide with more info on how to run and add new tests.if not, we will try to get to this soon.  thanks again!  this should be fixed as of `4.9.0`  i'm going to close this as it's just been sitting and the test structure has changed since this pr was opened.  we now have a way to merge failing test cases, so if this is still an issue and someone can open a pr with a [failing test case](https://github.com/marko-js/marko/blob/master/.github/contributing.md#adding-a-failing-test-case) we'll take another look.  i'm going to close this as it's just been sitting.  if this is still an issue and someone can open a pr with a [failing test case](https://github.com/marko-js/marko/blob/master/.github/contributing.md#adding-a-failing-test-case) we'll take another look.  i'm going to close this as it's just been sitting.  if this is still an issue and someone can open a pr with a [failing test case](https://github.com/marko-js/marko/blob/master/.github/contributing.md#adding-a-failing-test-case) we'll take another look.  closing as i don't think this is the right approach.  we should have a way to emit a `before-end` event or something that fires before `</body>` is written, or before `out` ends if there is no `<body>`.  at that point, users of the api can add additional things to the output and marko can use that to inject `componentglobals`, `initcomponents` and `awaitreorderer`.we should discuss more in #832  this was addressed by patrick in 0344faf8ab133aeddd9bce1c744341e6d85811b5"
0,0,0,0,"nice one @mlrawlings ! we now have `once` too, so `this.once('update', ()=> {})` may actually be quite useful. in theory a true `nexttick` method should run the callback as soon possible, but this will just be called somewhere along the chain of other events for `onupdate`, right?marko does have a`nexttick` module internally, so it may be worth exploring that option when necessary. the source is <https://github.com/marko-js/marko/blob/master/src/runtime/nexttick-browser.js>. i havn't tried it but i'm sure it's possible to import."
0,0,0,0,"hi @tinovyatkin -- this is similar to the failing test case i showed here: https://github.com/marko-js/marko/pull/918as a workaround, try adding an entry to your top level `marko.json`:```json""<amp-analytics>"": {""html"": true}```"
0,0.0052,0,0,"looks like this is only an issue for the html render?  the vdom is passing (unexpectedly) which is why the build is failing.that's interesting though.  i assumed this was a parsing issue, but i would expect that to affect both html and vdom."
0,0,0,0,congrats on this! nice to see some modern tooling going into the project :+1: :star2: i just wish you had used a 2 space tab width and single quotes... :sweat:
0,0,0,0,[![coverage status](https://coveralls.io/builds/15960403/badge)](https://coveralls.io/builds/15960403)coverage remained the same at 90.363% when pulling **b5a6ffc02f59ab90f4e2fc558456d19aed9305b5 on cestdiego:fix-runtime-id-collision** into **0f5e639775cb23a75fea5669e4a651ded537f6f7 on marko-js:master**.  [![coverage status](https://coveralls.io/builds/15956693/badge)](https://coveralls.io/builds/15956693)coverage decreased (-0.0008%) to 90.362% when pulling **74b157c18d6320399a8dde3c8f501330bc7d7b35 on cestdiego:fix-runtime-id-collision** into **0f5e639775cb23a75fea5669e4a651ded537f6f7 on marko-js:master**.  [![coverage status](https://coveralls.io/builds/15956693/badge)](https://coveralls.io/builds/15956693)coverage decreased (-0.0008%) to 90.362% when pulling **74b157c18d6320399a8dde3c8f501330bc7d7b35 on cestdiego:fix-runtime-id-collision** into **0f5e639775cb23a75fea5669e4a651ded537f6f7 on marko-js:master**.
0,0,0,0,is the await data not being passed as input to another tag? or is just rendering it in place? it would be helpful if you could show an example :)
0,0,0.047,0,"hi, any update on this bug ?thanks,"
0,0,0,0,is there any new progress with this?
0,0,0,0,[![coverage status](https://coveralls.io/builds/16113609/badge)](https://coveralls.io/builds/16113609)coverage decreased (-0.03%) to 90.337% when pulling **7076ff4483720b5663d24b7ae3a1cc7d7ea509df on autotest-refactor** into **0dfbc2147a3865ce603027de70054081fe8fd38c on master**.  [![coverage status](https://coveralls.io/builds/16134999/badge)](https://coveralls.io/builds/16134999)coverage decreased (-0.03%) to 90.337% when pulling **14a3b98a6c8cf32538a65a90cf70c6f15803c0ee on autotest-refactor** into **0dfbc2147a3865ce603027de70054081fe8fd38c on master**.
0,0,0,0,added a test that fails without this change:![image](https://user-images.githubusercontent.com/1958812/37854679-2efa2f2c-2ea9-11e8-8009-a20525f5ee7d.png)  fixed in `marko@4.9.3` - thanks for the pr!
0,0,0,0,[![coverage status](https://coveralls.io/builds/16157292/badge)](https://coveralls.io/builds/16157292)coverage remained the same at 90.338% when pulling **9e8b56ff08a57f580e5217108c5dac22487a5881 on failing-test-issue-1022** into **b1631ba3c8ad0a15e94a8bb2c58e18b4adaa95a3 on master**.  [![coverage status](https://coveralls.io/builds/16157292/badge)](https://coveralls.io/builds/16157292)coverage remained the same at 90.338% when pulling **9e8b56ff08a57f580e5217108c5dac22487a5881 on failing-test-issue-1022** into **b1631ba3c8ad0a15e94a8bb2c58e18b4adaa95a3 on master**.
0,0,0,0,[![coverage status](https://coveralls.io/builds/16324625/badge)](https://coveralls.io/builds/16324625)coverage increased (+0.002%) to 90.344% when pulling **103554a832d15980104ac623dcbf0df4bf62bc15 on fix-spread-fns** into **b7b970d8bfbc10687566b438a538283040cd21b8 on master**.  [![coverage status](https://coveralls.io/builds/16306368/badge)](https://coveralls.io/builds/16306368)coverage increased (+0.004%) to 90.342% when pulling **e1c623937fb085e955521bc5715576d7f7e6b396 on legacy-on-before-update** into **82db00e89e4c7cf39336f4d72e99ab16724671d6 on master**.  [![coverage status](https://coveralls.io/builds/16306489/badge)](https://coveralls.io/builds/16306489)coverage increased (+0.005%) to 90.343% when pulling **e1c623937fb085e955521bc5715576d7f7e6b396 on legacy-on-before-update** into **82db00e89e4c7cf39336f4d72e99ab16724671d6 on master**.
0,0,0,0,"any idea when the `<await>` tag will be able to be used in the browser ?  @patrick-steele-idem any idea when `<await>` may be supported int he browser ?i have some components that use isomprphic fetch and want to use await on the server to render server side when the data is available, then on the browser it only re-renders when inputs change (which may trigger another fetch)i can't seem to get a workaround workingi tried a component like this :serverawait.marko```static const onserver = typeof window == 'undefined'<if (onserver && input.promise)>  <await(p from input.promise)>    <include(input.renderbody)/>  </await></if><else>  <include(input.renderbody)/></else>```and it gets me pretty close.. it ends up with a flash of no content when the client re-renders until the client has fetched the data again.  one workaround could be to add a new argument to the await tag that takes a function returning a promise. if the await tag could retain the rendered dom until this new promise is resolved, it would then re-render nicely."
0,0,0,0,"i have the same problem with ""change"""
0,0,0,0,[![coverage status](https://coveralls.io/builds/16423812/badge)](https://coveralls.io/builds/16423812)coverage decreased (-0.02%) to 90.323% when pulling **b17ab8e87c6591ec2e328c8108df6ee0bd92a4f4 on fix-lasso-specific-regression** into **290cd500f6274403f7811891534430b418cf0401 on master**.
0,0,0,0,"@austinkelleher hey austin, this exact error is also popping up in the lasso-cli tool while in watch mode - see below:![screenshot from 2018-04-12 15-26-22](https://user-images.githubusercontent.com/6669336/38683670-efca22ae-3e65-11e8-8af2-72fee718236e.png)"
0,0.096555556,0,0,i see you added the failing test case for this issue.  do you have any idea when it may be fixed ?
0,0,0.00255102,0,"hey @cameronbraid, we're open to supporting other ""array-like"" objects in addition to arrays, but i don't think checking the presence of `foreach` is the best approach.  ""array-like"" objects don't necessarily implement array methods (see `arguments`/`nodelist`).  prior to es2015, the typical way to check for an ""array-like"" has been to [check for a numeric length](http://2ality.com/2013/05/quirk-array-like-objects.html).  something like:```jsfunction isarraylike(obj) {  var length = obj != null && obj.length  return typeof length === 'number' && length >= 0 && length % 1 === 0}```however, in es2015 the [iteration protocols](https://developer.mozilla.org/en-us/docs/web/javascript/reference/iteration_protocols) were introduced for exactly this reason.  it looks like the mobx arrays [do implement the iterable protocol](https://github.com/mobxjs/mobx/blob/d17e73cba664842048008cefbbd2243a6db1af30/src/types/observablearray.ts#l585), so this approach would work for them as well as arrays, generators, maps, sets, and other objects that conform to the protocol. however, because this is a newer protocol and we're still supporting browsers back to ie9, we'll need to have a fallback.  one thing that many third-party libraries (including mobx) do is use `""@@iterator""` in place of the symbol where it's not supported.```jsfunction iteratorsymbol() {    return (typeof symbol === ""function"" && symbol.iterator) || ""@@iterator""}```https://github.com/mobxjs/mobx/blob/master/src/utils/iterable.ts#l8built in types won't have this though, so if we wanted full support, we'd need to check the length to do ""array-like"" duck typing.  the two primary types i'm aware of are `arguments` and `nodelist`, neither of which are likely to be used within a template.  i'm thinking only supporting the iteration protocols (with the symbol → string fallback) should be sufficient.  thoughts?/cc @marko-js/core"
0,0,0,0.013380952,"@mlrawlings yeah, i understand that, i was really just wanting to relax the requirement of using array.isarray - which would solve the issue i currently face - which was that my templates were working when using for with status var, but when i remove the status var part of the expression the template no longer worked.then when i implemented the test case, i noticed that the 'for with loop var' helper has the check for .foreach so i added it into the 'standard for' helper to make them consistent."
0,0,0,0,[![cla assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/marko-js/marko?pullrequest=1037) <br/>all committers have signed the cla.
0,0,0,0,[![coverage status](https://coveralls.io/builds/16698172/badge)](https://coveralls.io/builds/16698172)coverage increased (+0.001%) to 90.325% when pulling **dfc079ac764dab9d2dc329a782102225fe378ed5 on 1038-legacy-dirty-check** into **810e29c56f2a8beebd004dc6ba77e7aa357ee746 on master**.  [![coverage status](https://coveralls.io/builds/16698223/badge)](https://coveralls.io/builds/16698223)coverage increased (+0.001%) to 90.325% when pulling **11099cb8a821976e50a3ee4399b3a397489f9ac3 on 877-transformer-array** into **810e29c56f2a8beebd004dc6ba77e7aa357ee746 on master**.
0,0,0,0,"same issue with lasso`warning!!${attrs} is deprecated, use ...attrs instead  at node_modules/lasso/head-118-3-26-33519-xjraht.l20k.marko:1:0`"
0,0,0,0,@austinkelleher thanks for pointing out that error. you were totally right. i've updated the example to something that actually works! here's a jsfiddle with it working as a way to confirm: https://jsfiddle.net/dustinbrownman/o08p2s61/
0,0,0,0,any workarounds?
0,0,0,0,"hi, tried marko-loader - it bundles js but not css. any suggestions?``` plugins: [    // avoid publishing files when compilation failed:    new webpack.noemitonerrorsplugin(),    // write out css bundle to its own file:    new extracttextplugin('dist/bundle.css', { allchunks: true })  ]``````test: /\.(css|less)$/,        loader: extracttextplugin.extract({          fallback: 'style-loader?sourcemap',          use: 'css-loader?sourcemap!less-loader'        }),```"
0,0,0,0,[![coverage status](https://coveralls.io/builds/16928405/badge)](https://coveralls.io/builds/16928405)coverage increased (+0.03%) to 90.378% when pulling **1a3733344057169f31bb7844491b887369fd14e2 on on-mount-update-test** into **28ff4e1485b176e081e6ecf70ea299a2d211fbea on master**.
0,0,0,0,"if you're using lasso, you will need to use the `lasso-less` plugin: https://github.com/lasso-js/lasso-less. if you're using webpack: https://github.com/webpack-contrib/less-loader"
0,0,0,0,i'm using brunchjs
0,0,0,0,"this is about to become a blocker for us now that we are nearing production.  is there any plan to address this in the short term ?i'm using a workaround, which has some issues, but gets part of the way there.serverawait.marko```static const onserver = typeof window == 'undefined'<div>	<if (onserver && input.promise)>	  <await(p from input.promise)>	    <include(input.renderbody)/>	  </await>	</if>	<else>"
0,0,0,0,[![cla assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/marko-js/marko?pullrequest=1047) <br/>all committers have signed the cla.
0,0,0,0,thanks for the report and detailed explanation @zhangyijiang. we should probably apply a fix somewhere in here: https://github.com/marko-js/markojs-website/blob/master/routes/docs/util/markdown.js#l79  this was actually an issue with the relative urls in the markdown files. i've fixed this and published a new version. we still need to publish a new version of the website.
0,0,0,0,"hi, as of marko 4.10.0 this is still crashing my server, it appears the generated `template.marko.js` code is wrong, as it has an undefined callback:```javascriptrenderbody: function renderbody(out) {  if (false) {    gov_task_list_task_section_task_nested_tag({        name: ""provide financial evidence"",        href: ""#""      }, gov_task_list_task_section0);  }  if (true) {    gov_task_list_task_section_task_nested_tag({        name: ""give medical information"",        href: ""#""      }, gov_task_list_task_section0);  }}````gov_task_list_task_section0` is never defined, so calling it crashes the express server."
0,0,0,0,is there a suggested solution for webpack using hashes?
0.021776224,0,0,0.004244755,"@dylanpiercey we actually hit this same problem today in a drop-down component we built where the body of the dropdown is a transcluded component. if the conditional is on the include inside another component, the key gets incremented the second time the component is rendered, but the parent context still tries to lookup the key using the original key name with no index (because the parent is not aware that the component was destroyed and recreated). this seems to happen because when the component is rerendered, it uses the parent's `keysequence` and the `___lookup` still contains the key, despite the child being destroyed. this makes sense since the destruction of the transcluded component happened in a child component so the parent component is not updated and the `keysequence` is not ""rebuilt"".here's a simple project that shows the issue.  https://github.com/jasonmacdonald/marko-conditional-include (i'll see if i can find some time to turn this into a failing, but the demo project was what i used to narrow down the issue in our project).there appear to be a couple options to resolve this issue: 1. when a node for a transcluded component is detached, we could remove the key from the `keysequence.__lookup` in the parent context.2. when a component is destroyed that belongs to a parent context, we force an update on the parent even if its state didn't change, which forces the `keysequence` to be rebuilt (i believe) without the transcluded component. _**this is our workaround for the moment**_3. we make getcomponent a bit smarter to account for keysequences rather than just using the `componentlookup` which only has the new key which has been incremented."
0,0,0,0,"@austinkelleher hey austin, any news on this issue? the same warning we got in markojs 4.9.0 and 4.10.0."
0,0,0,0,[![cla assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/marko-js/marko?pullrequest=1054) <br/>all committers have signed the cla.
0,0,0,0,[![coverage status](https://coveralls.io/builds/17578927/badge)](https://coveralls.io/builds/17578927)coverage decreased (-55.4%) to 34.954% when pulling **5b9c84337c88731850ae00e0b2df3c4751557a27 on multi-init-components** into **d6e251d87b3816ab4907666614ce80c471aee63b on master**.
0,0,0,0,[![coverage status](https://coveralls.io/builds/17583047/badge)](https://coveralls.io/builds/17583047)coverage decreased (-28.2%) to 29.06% when pulling **7b928d5ce98219f862ea8c1b9ec0bedad103170a on 880-dynamic-tag** into **cdc13228faae8ab7b8f3f838aaa62befa81531eb on master**.
0,0,0,0,"i realise this is a bit after the fact, but is there any way it can support something like this static const mytag = require(""ui-library/mytag"")```<div>  <mytag/></div>```rather than```<div>  <${mytag}/></div>```"
0,0,0,0,"the `npm run test-coverage` command uses it to auto open the coverage report because i'm lazy. 😂it's not totally necessary, but we could also switch to [`opn`](https://www.npmjs.com/package/opn).https://github.com/marko-js/marko/blob/76137568f20d047d7492f3d9f1543650e50b175a/package.json#l14  also, did you regenerate the whole `package-lock.json`?  the build is failing because of some changes to the way `prettier` formats code.  we either need to `npm run format` or only update these specific versions.i think if you were to `git checkout master -- package-lock.json && npm i` it would update the package lock for only those packages.  fixed in `4.11`  fixed in `4.11` (without breaking since we only target html elements)"
0,0,0,0,"i identified that bug 1 in this demo was caused by using a full page component.  i have refactored the demo to remove the full page component and unfortunately the 2 other bugs still remain.is someone able to take a look at this, as its a blocker for us"
0,0,0,0,fyi i have submitted a pr for a failing test case for the domexception bughttps://github.com/marko-js/marko/pull/1064  fyi i have updated the pr to include a second failing test for a different exception```     typeerror: cannot read property 'nextsibling' of null      at component.___foreachnode (src/components/component.js:542:43)      at component.___detach (src/components/component.js:533:14)      at morphchildren (src/morphdom/index.js:329:51)      at morphcomponent (src/morphdom/index.js:155:9)      at morphchildren (src/morphdom/index.js:346:44)      at morphdom (src/morphdom/index.js:799:5)      at /users/cameronbraid/workspace-new/marko-fork/src/components/component.js:516:13      at object.batchupdate [as ___batchupdate] (src/components/update-manager.js:63:9)      at component.___rerender (src/components/component.js:499:23)      at component.update (src/components/component.js:452:22)```
0,0,0,0.026636364,"yes i agree it's just treating the symptom. i hope the root cause is fixed, but it seems to be an old issue that keeps coming back up. in this case i'd like to have state updates working again while the root cause is being investigated."
0,0,0,0,@bryceewatson fyi i have implemented a test case that produces this error https://github.com/marko-js/marko/pull/1064
0,0,0,0,"does this also fix https://github.com/marko-js/marko/issues/947 ?  hmm, that ticket is also the result of global lookup not being cleaned. that's why i thought this may address it as well. i can dream i guess lol. i'll look to add a test case for that then."
0,0,0,0,[![coverage status](https://coveralls.io/builds/17743969/badge)](https://coveralls.io/builds/17743969)coverage decreased (-0.6%) to 90.519% when pulling **716952c58f31d27da9617133bab78762dba2f444 on scoped-attr-default-key-fix** into **1e4c5ce720c2c724de6ad6aeef49e18e06e6cc1a on master**.
0,0,0,0,[![coverage status](https://coveralls.io/builds/17741836/badge)](https://coveralls.io/builds/17741836)coverage increased (+90.5%) to 90.527% when pulling **5729a7efd9fe4a80ceefdb0c4444731d14e22645 on jsdom-context-require** into **47e2dfef0a216ce11e58a68b7501c82734f36dba on master**.  [![coverage status](https://coveralls.io/builds/17747036/badge)](https://coveralls.io/builds/17747036)coverage decreased (-0.6%) to 90.511% when pulling **1a948f8bd0e7248eae4864791e87208c96dd2c27 on nextsibling-fix** into **1e4c5ce720c2c724de6ad6aeef49e18e06e6cc1a on master**.
0,0,0,0.010276316,"great - thanks, that works for me  @mlrawlings i'm glad to help.  i really appreciate you fixing these bugs.  we are at the end of a dev cycle for a new frontend and these bugs are a blocker so you are helping in a big way by looking into this.thanks for the explanation about what the different test scenarios are about.i identified another bug using my demo project at https://github.com/cameronbraid/marko-dom-issue and i have isolated the steps to reproduce (still using components-pages sorry!) and provided a pr https://github.com/marko-js/marko/pull/1072  i did this as a means for making it easier for you to execute the failing case so that you can implement a 'real' test case that targets the cause and asserts on expected outcomeonce again, thank you very much for your work on this issue."
0,0,0,0,thanks
0,0,0,0,"guys, i've a similar problem on another repo (marko-path-router):https://github.com/charlieduong94/marko-path-router/issues/34maybe be same issue. feel free for download this repo and test it."
0,0,0,0,[![coverage status](https://coveralls.io/builds/17918941/badge)](https://coveralls.io/builds/17918941)coverage increased (+0.03%) to 90.568% when pulling **037d2f59ccf16fec65e1832f141e3c8bfb122771 on tag-params** into **2ec6695bd3f6a3ef1f6a369f636529b14721b003 on master**.
0,0,0,0,"@fineline did you figure this out? i too am using marko for templating only on the server. i am not passing a html string to a browser, so i'm certain that i don't require a module bundler. correct me if i am wrong."
0,0,0,0,[![coverage status](https://coveralls.io/builds/17869950/badge)](https://coveralls.io/builds/17869950)coverage increased (+0.02%) to 90.555% when pulling **10965a3717039a3c8e0fcae49e6f25b408b2c942 on style-array** into **2ec6695bd3f6a3ef1f6a369f636529b14721b003 on master**.
0,0,0,0,"hello,nodejs now supports the object spread operator, but marko still gives the same error message. (isn't it related to the js tokenizer used in marko?)"
0,0,0,0,thank you so much for the detailed reply.this does indeed look like the feature i was looking for.looking forward to seeing the pr merged 👍.
0,0,0,0,any update?
0,0,0,0,"> link to your project: ebay's private project, sorry.@ulivz can you ping me on slack?  my userid is `mirawlings`"
0,0,0,0,@jasonmacdonald would you be willing to test if this fixes your issue in #947?
0,0,0,0,great work :)verified fixed with marko 4.12.1
0,0,0,0,[![coverage status](https://coveralls.io/builds/18048285/badge)](https://coveralls.io/builds/18048285)coverage remained the same at 90.59% when pulling **f78a0360b213ac252d0c78edc4fe502ef135f304 on cameronbraid:failing-test-for-issue-1087-diffpatch-transcluded-input-change** into **14d29438632bfd96479cdda8be9cb6cc2721945d on marko-js:master**.
0,0,0,0,[![coverage status](https://coveralls.io/builds/18075829/badge)](https://coveralls.io/builds/18075829)coverage increased (+0.01%) to 90.6% when pulling **5641fb9e0d3a3e29f5b61a6e6ea10c7c8bd618e4 on fix-for-keys** into **14d29438632bfd96479cdda8be9cb6cc2721945d on master**.
