finagle.Anger,finagle.Sadness,finagle.Fear,finagle.Joy,finagle.Comments
0,0,0,0,ping @mosesn
0,0,0,0,@mkhq yeah we were able to land it with that change.  @mkhq  please see [269e181](https://github.com/twitter/finagle/commit/269e18150f776c640745d5cc27b16211f6629678) for attribution
0,0,0,0,[![cla assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/twitter/finagle?pullrequest=670) <br/>all committers have signed the cla.
0,0,0,0.01207563,"this pr looks legit, but i'm having an internal tug of war where part of me thinks that the backoffs are material to equality of a `budget`. on the other hand, it's not fantastic if it never terminates/oom's on you.as a more general question, is this just to serve the issue you raised, https://github.com/twitter/finagle/issues/669, or is it important in and of itself? in my mind's eye, its hard to justify a client having such a deep notion of `equality`/`hashcode` since a lot of the data inside is dynamically generated and highly unlikely to be truly equal to any other client. i would personally advocate for the `http.client` (and other clients) having `equals` and `hashcode` defined as instance equality/hashcode. would that solve your problem?  it seems i've gotten my terminology a bit twisted. `http.client` isn't so much a client as a client factory, and it does kind of make sense to have `equality` and `hashcode` there since it is arguably just configuration data, and configurations seem reasonable to compare.i was arguing for defining equality and hashcode as you've laid out at the end, but i may walk it back. i still think that the equality of `budget` should probably consider the backoffs, but that would entail trying to detect cycles in the `stream` which is not great.i'm actually okay with this as is but more feedback would be helpful.and thanks for the pr!"
0,0,0,0,@ryanoneill alright! let me know if i need to do something on this pr :)
0,0,0,0,"hi @diebauer, thanks again for the pull request. this has been submitted internally and pushed back out to github as commit https://github.com/twitter/finagle/commit/88e7bea9bf29bc5fed3207782bf82b25bf869c4a"
0,0,0,0.036590909,"@ryanoneill thanks, sounds good üëç  just a note on running the integration tests, the cluster protocol was introduced in redis 3.2. i've tested it against redis 4.x (and 3.x) and it worked fine."
0,0,0,0,closed via a376dc91f7cbec1276ee5114cd89b9e9a50bac69.
0,0,0,0,"hi @sohamsankaran , thanks for the report! now you can close the connection by callingclient.asclosable.close()."
0,0,0,0,@spockz can you explain the motivation for wanting braces?
0,0,0,0,"so, my best guess to why braces aren't allowed, is that we wanted to be conservative in what we accepted. i'm not opposed to changing that restriction, but we'd want @adleong to be amenable to the patch. or perhaps we can come up with a different approach that works for both?"
0,0,0,0,we can't use finagle with aws alb unless this is fixed. it's a blocker for us. i can probably devote time to fixing this if anyone would be kind enough to point me in the right direction.
0,0.008649351,0.005883117,0,"@mosesn as noted above, http 1.1 spec requires valid host header. we're making requests with finagle to aws alb, which rejects the requests with 400: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-troubleshooting.html#http-400-issues.  @mosesn ah i see what you're asking now. yes, setting the host header is a workaround for our use case (i'm currently in the process of testing our application with a special-case configuration that does just that). but it's very hacky, since i have to set a host header manually for each request instead of letting finagle just ""do the right thing"". as an aside, curl and other http tools set the host header, so it seems like a good idea that finagle follows suit."
0,0.009918033,0,0,"@justinpermar yeah, the tricky thing is that curl and other http tools can infer the host header because they assume you pass a url.  finagle doesn't assume that, and indeed many users just resolve ip addresses from zookeeper (or similar).  we could potentially add an http-specific configuration method as a helper, something like `http.client.withhostheader(""twitter.com"")` but then the downside would be that if you dump the request before you pass it to the client, it doesn't actually reflect what it will look like when it's sent.the `requestbuilder` api is intended to address this problem, but it's pretty limited in what it checks, since http is such a complicated protocol."
0,0.009491071,0,0,"just a wild guess, but try adding a host header.on feb 10, 2018 3:47 am, ""politrons"" <notifications@github.com> wrote:> one line summary of the issue here.> expected behavior>> when i do an http request to grizzly server using this code>> val client: service[request, response] = http.newservice(""localhost:8080"")> val request = http.request(http.method.get, ""/hello_server"")>> return a 400 bad request. but using this one works>> val client: service[request, response] = http.newservice(""localhost:8080"")> val request = requestbuilder()> .url(new url(""http://localhost:8080/hello_server""))> .buildget()>> any idea why?.>> the funny thing is, that the first code against another finagle http> server or vertx server works fine, it¬¥s failing only against grizzly.>> ‚Äî> you are receiving this because you are subscribed to this thread.> reply to this email directly, view it on github> <https://github.com/twitter/finagle/issues/674>, or mute the thread> <https://github.com/notifications/unsubscribe-auth/acz9mholx8kjc5-5n7vjx9ilrokjzoz9ks5ttxpzgajpzm4sa4xl>> .>"
0,0,0,0,yeah adding the header or directly adding host in request make it works. still wondering why with vertx or finagle servers are not needed
0,0,0,0,"@politrons my guess would be that only grizzly validates that the request has a host header by default.  i'm going to close this issue, since i think your question has been answered, but please feel free to open a new one or continue this thread if you have more questions."
0,0,0,0,obsolete
0,0,0,0,"@politrons http.http2 is actually a set of params, so you need to use http.client.configuredparams(http.http2) instead."
0,0,0,0,[![cla assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/twitter/finagle?pullrequest=678) <br/>all committers have signed the cla.
0,0,0,0,"@adriancole would changing the name to ""finagle-zipkin-scribe"" and adding some documentation fit what you're looking for?  it seems like unnecessary work for us to add our own http tracer implementation when zipkin-finagle already has one.  ok, so to be clear on what your concern is:1.  finagle users today default to finagle-zipkin because it sounds like the ""right thing"".2.  finagle-zipkin uses the scribe transport, which means that you feel like you should continue supporting scribe, even though it's a burden to maintain it.3.  you want to stop supporting scribe, but you first want finagle-zipkin to no longer seem like ""the right thing"".is that right?"
0,0,0,0,"@politrons from the [javadoc][0]:> thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method.>>normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed.sometimes this happens if you're trying to use two libraries that are incompatible.  make sure you're using the same version of scrooge and finagle, and that you haven't cached anything that you compiled with an older version of finagle.[0]: https://docs.oracle.com/javase/7/docs/api/java/lang/nosuchmethoderror.html  @politrons where have you looked so far?  we have documentation both for [scrooge][0] and for [finagle][1].  if you've already looked at these, could you elaborate on what you're missing?[0]: https://twitter.github.io/scrooge/finagle.html[1]: https://twitter.github.io/finagle/guide/  @politrons which documentation is for an older version of scrooge?  the one i linked you to should be current.we link to scrooge in finagle under the ""protocols"" section, here: https://twitter.github.io/finagle/guide/protocols.html?highlight=scrooge.  please feel free to open a pull request if you have ideas for how we could improve the documentation.we don't currently have a thrift streaming implementation, in large part because the thrift protocol doesn't support streaming.  we're looking into different possible implementations though.  how are you intending to use thrift streaming?"
0,0.000414545,0.003123636,0,"i'm not a grpc expert, but my understanding is that grpc's thrift is actually sending thrift messages over http/2, speaking a grpc-specific protocol.  we don't support that protocol today, although we might support it in the future.  thrift in general doesn't support streaming, so i think you may have a difficult time migrating off of grpc without supporting two clients for a little while.if you want to use scala, but also want to continue using the grpc thrift protocol, scala typically makes it easy to call java from scala, so i would encourage you to continue using grpc-java, and call it from scala.if you wanted to use finagle's http/2 implementation to speak with a grpc remote peer, there are a few possible complications.  the one that would probably be the largest impediment is that our http implementation doesn't support http trailers.  trailers were considered fringe before grpc (as an example, browsers don't support http trailers), and we haven't had a chance to implement them since grpc became popular.  hmm, interesting.  it looks like it's [intentional][0] that we don't mark the handshake as ""finished"" here, but clearly you should be able to access the peer certificate so you can validate it.  i'll ask around to try to better understand what the intent here is, i agree that this seems wrong. cc @ryanoneill [0]: https://github.com/twitter/finagle/blob/559ae4ad3eb6bae4c2f885fb3149b492c6bf46a0/finagle-netty4/src/main/scala/com/twitter/finagle/netty4/ssl/server/sslserververificationhandler.scala  @iplessmann from talking to @ryanoneill it sounds like sslpeerunverifiedexception indicates that the client might not be passing you certificates.  the way to indicate that we hard fail when that happens is to pass a `clientauth` parameter of `clientauth.needed` in `sslserverconfiguration`.  can you try that out so we can check whether you're actually passing the certs?  for what it's worth, internally we do inspect the certificates during the sslsessionverification step, so it should be possible for you to do it too.  @adriancole it looks like in the short term, we can rename finagle-zipkin to finagle-zipkin-scribe, and we'll update our docs to refer to zipkin-finagle.  in the long term we'll migrate off of it and delete finagle-zipkin-scribe.  when that happens, we'll either supply a new transport that's whatever twitter is using internally, or we'll stop exporting our own tracing facade and will migrate to a common facade, like opentracing or zipkin-reporter.  does that seem reasonable?  @spockz is this something you're still interested in?  it sounds like you want to use braces similarly to how linkerd uses braces.  we talked about this in #678, but for anyone who's following along at home, this is a work in progress, and is much more work than we thought it would be.  thanks @lvc!  i'm going to close this ticket for now, but it's very interesting, and thanks for sharing it.  sorry for dropping the ball on this @spockz.  i think exposing an api where we take certificates directly is worth looking into, i'll talk to @ryanoneill and see what he thinks."
0,0,0,0,"i think the tricky thing here is propagation.  if some services respect curlies and some don't, propagating dtabs will be a mess.@spockz going back to the original thing you were trying to get done, `.newservice(""/endpoint/host/method/pathtemplate"")` looks like a fine format, and doesn't seem to have curlies.  what's the issue you ran into with this? it seems to me like you should be able to use it with the existing `ourresolver`."
0,0,0,0,"i think we'd be open to a community contributed finagle-zipkin-http if we had a commitment from the community to help support it, although it seems a bit redundant, given that zipkin-finagle http already exists.  would you be willing to commit to reviewing prs that come in for finagle-zipkin-http?  you've been helpful with reviewing other zipkin-related prs, so i don't think this would be a big shift.ok, that's good feedback.  we haven't looked too seriously at any of this stuff.  i'll mention census in our internal ticket.we've renamed finagle-zipkin to finagle-zipkin-scribe, so the next step is to change the docs to mention zipkin-finagle."
0,0,0,0,">> i think we'd be open to a community contributed finagle-zipkin-http if we> had a commitment from the community to help support it, although it seems a> bit redundant, given that zipkin-finagle http already exists. would you be> willing to commit to reviewing prs that come in for finagle-zipkin-http?> you've been helpful with reviewing other zipkin-related prs, so i don't> think this would be a big shift.>in ideal world i think finagle-zipkin-http doesn't need to exist in, butpractically speaking as people do download things and used what's pack-in,if a pack-in exists and that's only scribe, i hypothesize people will startdownloading it (we can look at stats later to see how wrong i am :) ).if there was no pack-in, it would be more clear.. it is just where we are.having a pack-in that is http and works with tech that can consume zipkindata (like jaeger, datadog, google cloud, aws).. that's worth doingeventhough i have little time. if at some point scribe is removed, then wecan also consider removing the http transport (for the zipkin-finaglerepo). it is really about this transition period and making sure that wearen't discouraging a transition. i'll also try to find someone else tohelp reviewing this stuff.> ok, that's good feedback. we haven't looked too seriously at any of this> stuff. i'll mention census in our internal ticket.>:thumbsup: thanks for listening> we've renamed finagle-zipkin to finagle-zipkin-scribe, so the next step is> to change the docs to mention zipkin-finagle.>thank you for the help!"
0,0,0,0.002180328,"> 'i need to verify whether that works for us for clients'. verifiers do work on the client as well.i‚Äôm aware that verifiers work on the client. we currently use them for san/server hostname checking. i was referring to whether we can configure the client with empty configuration, initialise the engine factory with the sslcontext and add a verifier.the de facto standard in java is to enable ocsp through a -djavax.security property which exact name eludes me for now. i haven‚Äôt gotten around to benchmark and resilience test this. i need to do that because going to http2 means going to openssl bindings which don‚Äôt react to the standard java‚Äôs security configuration.related, alpn and ocsp-stapling is available in jre9. are there any plans to support j9? currently using j9 still leads to some unsupported engine error.update:java `x509trustmanager````system.setproperty(""com.sun.net.ssl.checkrevocation"", ""true"");security.setproperty(""ocsp.enable"", ""true"");```jdk9 ocsp stapling on [client and server](https://cdn.app.compendium.com/uploads/user/e7c690e8-6ff9-102a-ac6d-e4aebca50425/f4a5b21d-66fa-4885-92bf-c4e81c06d916/file/3c93ea22f64e8a22f67d65c46613c466/j1_2015_con6710.pdf), slides at the end"
0,0,0,0,ah bummer. we should patch scala_school.can you try following the instructions at [contributing](https://github.com/twitter/finagle/blob/develop/contributing.md)?
0,0,0,0,"is there anything wrong with setting the host header via a filter?```case class withhostheader(host: string) extends simplefilter[request, response] {  override def apply(request: request, service: service[request, response]): future[response] = {    request.host = host    service(request)  }}withhostheader(""localhost"").andthen(http.newservice(""localhost""))```"
0,0,0,0,"@spockz how about using scala string interpolation?  we could do something like:`dtab""apis.com:get:/accounts/{id}/transactions""`  @spockz cool!  can you try it out and get back to us?  i'm going to close this ticket for now, but if it doesn't work out, we can reopen it.  @dreverri no, that will work fine.  this issue is specifically for when you want a different host header for different remote peers in the same loadbalancer."
0,0,0.0354,0,"`finagle-example` does not depend on guava in sbt build, but in pants build it does. looks like been broken since the removal of guava from serversets."
0,0,0,0,a patch is in progress.  this should be fixed with https://github.com/twitter/finagle/commit/6f8adbfe90a6573de98b0653223d4fd0b6c4a4ed.
0,0,0,0,"after some extra digging around i managed to get it working. turns out there is a some extra server configuration needed.```http.server      .withtransport.tls(sslserverconfiguration(clientauth = clientauth.needed), (config: sslserverconfiguration) => {      val context: sslcontext = sslcontextbuilder        .forserver(privatekey, password, certificate)        .trustmanager(trustedcertificate).build()      val engine = context.newengine(io.netty.buffer.unpooledbytebufallocator.default)      engine.setneedclientauth(true)      engine(engine)    }, sessionverifier)```with this configuration i was able to retrieve the peercertificates in the sessionverifier."
0,0,0,0,closing this since we upgraded to libthrift-0.10.0 as of https://github.com/twitter/finagle/commit/61c7a71182866250e53f9731c46f31dde28d464c.  closing this since we upgraded to libthrift-0.10.0 as of https://github.com/twitter/finagle/commit/61c7a71182866250e53f9731c46f31dde28d464c.
0,0,0,0,"@adriancole @mosesn  if no one is working on it, i would like to work on this issue."
0,0,0,0,please do!
0,0,0,0,i think @ryanoneill got busy on some other work. we'll find someone else to take a look. thanks for your patience.
0,0,0,0,[![cla assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/twitter/finagle?pullrequest=685) <br/>all committers have signed the cla.
0,0,0.007421053,0,"> i think @ryanoneill got busy on some other work. we'll find someone else to take a look. thanks for your patience.it me.working on getting this pulled in, apologies for the delay and thanks for your patience."
0,0,0,0,this got merged in https://github.com/twitter/finagle/commit/86b151bf641534304c9c9102d93e1e8e3ea9348athanks again @mkhq.
0,0,0,0,"works for me, thanks for following up!"
0,0,0,0,"i think this is working as intended, so i'm going to close this for now until we get more information.  @cryptoque üëç"
0,0,0,0,"@cricket007 part of it was that it wasn't released when we started, but the bigger piece is that thrift 0.10.0 was stable for a long time, and we don't know what issues 0.11.0 will have.  we figured it made more sense to wait and see for a few months whether they rush to get a patched version before immediately moving to the latest and greatest.if you go to maven central or the badge in the finagle readme, you can see when libraries have been published most recently.  we've recently switched our versioning to be yy.month.0, so the most recently published version across both scrooge and finagle was 18.3.0, and the next one will be 18.4.0.  we don't control libthrift, so we can't synchronize that one.yep, you'll want to wait until 18.4.0 if you want to use libthrift 0.10.x."
0,0,0,0,mentioning openzipkin/b3-propagation#6 here so it's connected.
0,0,0,0.005375,"@kevinoliver:> for the former, your best best is to modify the stack. this might sound scarier than it is.for the latter, it sounds like this is thriftmux, if you are using scrooge to generate your bindings you should be able to use service per endpoint (https://twitter.github.io/scrooge/finagle.html#serviceperendpoint) and put your filter there."
0,0,0,0,"i have the same problem, when i using code like `val client: service[request, response] = http.newservice(""localhost:8080"")val request = http.request(http.method.get, ""/hello_server"")`it's return 400 bad requestwhen i using code like `val client: service[request, response] = http.newservice(""localhost:8080"")val request = requestbuilder().url(new url(""http://localhost:8080/hello_server"")).buildget()`it will be successed.i found something like`val withhost = config.headers.updated(fields.host, seq(hostvalue))`  at line 153 on source file 'requestbuilder'so i think, it will be working , add header info like `val client: service[request, response] = http.newservice(""localhost:8080"")request.headermap.add(""host"", ""localhost:8080"") // add headerval request = http.request(http.method.get, ""/hello_server"")`so it's working, return status 200, mybe there is a bug!!!"
0,0,0,0,"using jdk9 creating our own `sslcontextclientenginefactory` as below does execute and i'm able to connect to our existing http/1.1 servers. (this obviously won't work on jdk8.)however, pointing the client to `http2.akamai.com` results in ""this browser is not http/2 enabled."" when using applicationprotocols.unspecified, and ""com.twitter.finagle.connectionfailedexception: null at remote address: http2.akamai.com/2a02:26f0:7b:299:0:0:0:2a71:443."" when i set the applcationprotocols to ""h2"". whereas with the normal jdkclientenginefactory i get back ""you are using http/2 right now!"", regardless of the protocols i specify. also, i couldn't figure out how to debug on a h2 enabled finagle server whether i'm receiving a request over h2 or over http/1.1 how can i access that information?this is on finagle 18.2.0 btw.```scalafinal class sslcontextclientenginefactory(sslcontext: sslcontext) extends sslclientenginefactory {  def apply(address: address, config: sslclientconfiguration): engine = {    val engine = sslclientenginefactory.createengine(sslcontext, address, config)    sslclientenginefactory.configureengine(engine, config)    config.applicationprotocols match {      case applicationprotocols.unspecified => ()      case applicationprotocols.supported(appprotocols) =>        engine.self.getsslparameters.setapplicationprotocols(appprotocols.toarray)    }    engine  }}```test code:```scala        final sslclientconfiguration x = new sslclientconfiguration(option.empty(),            keycredentials.unspecified$.module$,            trustcredentials.unspecified$.module$,            ciphersuites.unspecified$.module$,            protocolsconfig.enabled(arrays.aslist(""tlsv1.2"")),            applicationprotocols$.module$.fromstring(""http/1.1""));        final http.client client2 =            com.twitter.finagle.http.client()            .withhttp2()            .withtransport().tls(x, jdkclientenginefactory$.module$); //force default jdk client//            .withtransport().tls(x, new sslcontextclientenginefactory(clientsslcontext)); // always results in http1.1, do i need to do something with the sslcontext as well? log.info(httpcodec.encoderesponsetostring(await.result(client2.newservice(""http2.akamai.com:443"").apply(request.apply(""https://http2.akamai.com/"")))));```"
0,0,0,0.0166,"it seems like you have questions about two parts of the behavior:1.  `latchperiod` isn't respected, it just uses a minute every time2.  why start with an empty snapshot?1 is clearly a bug, but i think that 2 is expected behavior.  we expect that metrics collection happens periodically, and that this is a latched metric.  if we used a `current` histogram, then you might get a weird result if it was near the beginning of incrementing it, while it still didn't have very many samples.  hence, we use a snapshot histogram from the previous minute.  this presents us with the question, what do we do with the first one?  in favor of consistency, we decided to use the previous minute's snapshot, which is implicitly the empty histogram.i think we've discussed documenting it better‚Äìi thought we had, but if you couldn't find it in the documentation, it sounds like we haven't done a good enough job of it!  do you mind making a pr to help us make this clearer?"
0,0,0,0,"i see, we used to have a statsreceiver for that purpose called `immediatemetricsstatsreceiver` https://github.com/twitter/finagle/blob/4f47e6b8ae4a14b1ebb4c6cb78bb4ffbe4a7e165/finagle-stats/src/main/scala/com/twitter/finagle/stats/immediatemetricsstatsreceiver.scalawe've replaced it with an immediatemetricshistogram, which you can hook up with metrics.createdetached and metricsstatsreceiver.  however, you do need to thread the metricssr through to your clients and servers, since it's no longer the default stats receiver."
0,0,0,0.001870968,"@mosesn thanks for pointing me to that class. i'll try to use it.now back to the issue of `latchperiod` being not respected. frankly, the more i look at the code, the less i understand it. for example:* what is the purpose of a ""wiggle room"" of 1 second? [:82](https://github.com/twitter/finagle/blob/9cc08d15216497bb03a1cafda96b7266cfbbcff1/finagle-stats/src/main/scala/com/twitter/finagle/stats/metricsbucketedhistogram.scala#l82). looks like a quick workaround to a very specific issue for a very specific use-case in a very specific environment.* i do not understand potentially updating `nextsnapafter` to the value in the past [:84](https://github.com/twitter/finagle/blob/9cc08d15216497bb03a1cafda96b7266cfbbcff1/finagle-stats/src/main/scala/com/twitter/finagle/stats/metricsbucketedhistogram.scala#l84). if i'm not mistaken, this will cause histogram to be (almost) empty occasionally. consider a test case: last snapshot is made at `t0`, `latchperiod` is 1 minute. we call `snapshot` 2 times in a row at `t0 + 61.seconds` and `t0+62.seconds`. first call will return snapshot with data for 61 seconds and set `nextsnapafter` to `t0 + 60.seconds`. next call will include data for only 1 second and set `nextsnapafter` to `t0 + 120.seconds`* having mutable snapshot to handle recalculations, while returning _new instance_ of immutable snapshot on _each call_ from _synchronized block_ [:94](https://github.com/twitter/finagle/blob/9cc08d15216497bb03a1cafda96b7266cfbbcff1/finagle-stats/src/main/scala/com/twitter/finagle/stats/metricsbucketedhistogram.scala#l94)i'm relatively new to scala, so maybe i'm missing something. anyway, what do you think about the mentioned issues? would you be open to consider a pr that fixes both the `latchperiod` issue and also all the issues mentioned above? or would you prefer an isolated fix isntead?"
0,0,0,0,"hi @kaqqao,i think you need to change how you implement `backoffat`. check out it's [scaladocs](https://github.com/twitter/finagle/blob/develop/finagle-core/src/main/scala/com/twitter/finagle/service/retrypolicy.scala#l144-l149) for an example of how to break after a certain number of attempts."
0,0,0,0,"hey @kevinoliver ,you're indeed right! thanks a bunch for the pointer!i'm now missing the point of the `simpleretrypolicy ` constructor argument, but that's less important."
0,0,0,0,"@ksilin not as of yet, but i do expect us to add this at some point within the next few months."
0,0,0,0,"thanks for the pr, this looks great!  let's continue the discussion on the initial ticket, sorry i've been slow in responding, i've been caught up in other stuff."
0,0,0,0,@ryanoneill the netty sslcontextbuilder supports passing in [keymanagerfactory](https://netty.io/4.1/api/io/netty/handler/ssl/sslcontextbuilder.html#keymanager-javax.net.ssl.keymanagerfactory-)s and [trustmanagerfactory](https://netty.io/4.1/api/io/netty/handler/ssl/sslcontextbuilder.html#trustmanager-javax.net.ssl.trustmanagerfactory-). would you be willing to accept a merge request which extends the `keycredentials` and `trustcredentials` to be constructed with a `keymanagerfactory` and `trustmanagerfactory` respectively which are then used to call the matching methods of `sslcontextbuilder` in the `netty4clientsslconfigurations` and `netty4serversslconfigurations`?
0,0,0,0,[![cla assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/twitter/finagle?pullrequest=692) <br/>all committers have signed the cla.
0,0,0,0,[![cla assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/twitter/finagle?pullrequest=693) <br/>all committers have signed the cla.
0,0,0,0,"only guessing, but i guess the vm will automatically load all types that appear in a method, that's why it crashes even if the toggle is disabled.by moving the creation of the epolleventloopgroup into an own method, that also has only the base type eventloopgroup in the signature, we can defer loading it until the new method is really invoked."
0,0,0,0,@adleong seems like the pr associated with this issue was committed in https://github.com/twitter/finagle/commit/9deb18b45415b0961c7ca26b44ce967d6f73a18e so i'm going to close out this issue.
0,0,0,0,thanks robert! this has been merged in [940809af1a5f1874af0513c9cdca3b1c3b2ce03c](https://github.com/twitter/finagle/commit/940809af1a5f1874af0513c9cdca3b1c3b2ce03c#diff-fcef520180ae4933a3171883ef45d69a)  thanks @edio! this has been merged in [0c39217724c2c701b2b7f46932ee5869a997c061](https://github.com/twitter/finagle/commit/0c39217724c2c701b2b7f46932ee5869a997c061)
0,0,0,0,"we recently saw this issue when using finagle clients with play framework 2.6.13 - or any one of our other services that forced an upgrade to netty 4.1.23 but is calling other finagle services via finagle-thrift .i don't mind submitting a patch to finagle to upgrade to latest netty, but to avoid similar problems in the future would the group here find it unreasonable to shadow-jar netty inside of finagle.(todo: list pros/cons of shadow-jar)"
0,0,0,0,"@mandar-shinde do you mind also updating two other repos so we could keep these consistent?they are [finatra](https://github.com/twitter/finatra), and [dodo](https://github.com/twitter/dodo), thank you."
0,0,0,0,"@mohsinbxl thanks for the issue, we'll take a look. it looks that perhaps the urlclassloader can return nulls in the array and it isn't being properly handled. we'll take a look, thanks!"
0,0,0,0,"@vsabella in general finagle is highly sensitive to a specific version of netty -- the one listed in the build.sbt and is not expected to work with any other version. updating netty is generally a large process and not something we would likely accept in a pull request (sorry) as we have to move/fix internal things on occasion. with that, we are actively working to update to netty 4.1.26 soon. stay tuned, thanks!"
0,0,0,0,"thanks @spockz , this is merged in https://github.com/twitter/finagle/commit/c863ca0b606455d78350588595b3190165efe26b."
0,0,0,0,fix merged in util: https://github.com/twitter/util/commit/3adca94a9e2b21a702aad619902ce5ef2e29de65
0,0,0,0,closing since a fix was merged in https://github.com/twitter/finagle/commit/0c39217724c2c701b2b7f46932ee5869a997c061.
0,0,0,0,"finagle is developed internally in a monorepo and thus changing a core dependency like jackson requires updating the entire internal repository so we tend to do these updates ourselves. to make this change, we need to update our internal monorepo all at the same time which are not currently ready to do. but please stay tuned.  if you're ok with it, i'm going to close this issue for now. as we chatted, i would try to add some exclusion rules. please feel free to re-open or open a new issue if you have problems."
0,0,0,0.065380952,@samschlegel this is bizarre.  it looks like we're requeueing your request every time.  your success and failure metrics reflect that everything is succeeding?  can you try removing the requeuefilter from the stack and see if you still have this issue?
0,0,0,0,"@adleong i think this is an issue with your certs, not with finagle.  buoyant.io has let's encrypt certs, which may be too fancy for your jvm.  check out this stackoverflow page: https://stackoverflow.com/questions/34110426/does-java-support-lets-encrypt-certificates"
0,0,0,0,@jdreyesp from the error [notsslrecordexception][0] it smells like curl is sending a non-tls http message.  can you try changing your scheme in your curl to be `https://localhost:8080`?[0]: https://netty.io/4.0/api/io/netty/handler/ssl/notsslrecordexception.html
0,0,0,0,"@jdreyesp i'm not sure i understand why you want to suppress this warning, which seems useful to me.  you can't consume the server without tls, so i don't know why your clients are trying so hard to do it.  can you elaborate on your use case?  i see.  you could reduce the log level for this specific component until everything migrates over in your logging configuration (like logback, or jul), but i think the better solution might be to serve traffic for both http and https, and then cut the http port later.  this may simplify your migration story too, since clients won't need to figure out how to speak tls immediately."
0,0,0,0,"thanks @prahathess-rengasamy-ck, we'll look into upgrading.  unfortunately, we can't just upgrade finagle because internally, twitter uses a monorepo, and we'll have to upgrade all at once.  we'll keep you posted in the mean time as we investigate.  @jdreyesp shouldn't it be logged under `com.twitter.finagle.netty4.channel.channelstatshandler`?  that's the name we create the logger under in channelstatshandler.  https://github.com/twitter/finagle/blob/develop/finagle-netty4/src/main/scala/com/twitter/finagle/netty4/channel/channelstatshandler.scala#l16"
0,0,0,0,"hi @mosesn , that was my first try, but it didn't work. apparently some class in a higher package level is still throwing this warning."
0,0,0,0,hi @zhangandyhui. you might find it helpful to take a look at the [thrift client and server examples](https://github.com/twitter/finagle/tree/develop/finagle-example/src/main/java/com/twitter/finagle/example/java/thrift) in finagle-example.
0,0,0,0,[![cla assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/twitter/finagle?pullrequest=703) <br/>all committers have signed the cla.
0,0,0,0,"@smlance for the record, here is where the duration is tracked:https://github.com/twitter/finagle/blob/911a01cee08852f47385ac7b9d709cf3fc5422a9/finagle-netty4/src/main/scala/com/twitter/finagle/netty4/channel/channelstatshandler.scala#l33-l34https://github.com/twitter/finagle/blob/911a01cee08852f47385ac7b9d709cf3fc5422a9/finagle-netty4/src/main/scala/com/twitter/finagle/netty4/channel/channelstatshandler.scala#l133"
0,0,0,0,"üéâ @ben-ng, do you mind sharing how you use it?"
0,0,0,0,[![cla assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/twitter/finagle?pullrequest=706) <br/>all committers have signed the cla.
0,0,0,0,"merged as 60187e275dfe75dbb81ae1a8e6e4e2f86430196d. thanks!  merged as 6c02812036ebf0036a0f34275796fda4ea083248. thanks!  i'm closing this because it's been inactive for nearly a year. from the history, it looks like it was really close and may be worth picking back up. if that is the case, feel free to reopen this and get it merged with `develop`."
0,0,0,0,"the `metrics` singleton *is* public, so i can use that - sorry for the noise."
0,0,0,0,"hey @mosesn, is the netty4 version still frozen?  we'd really like to pick up a bug fix from netty 4.1.17"
0,0,0,0,"we're in the process of checking the latest release. i'm hopeful we'll haveit done by the next oss release.on tue, jul 17, 2018, 5:22 pm alex leong <notifications@github.com> wrote:> hey @mosesn <https://github.com/mosesn>, is the netty4 version still> frozen? we'd really like to pick up a bug fix from netty 4.1.17>> ‚Äî> you are receiving this because you are subscribed to this thread.> reply to this email directly, view it on github> <https://github.com/twitter/finagle/pull/678#issuecomment-405758996>, or mute> the thread> <https://github.com/notifications/unsubscribe-auth/acz9mhghhvl1g-blr5mhlmjrywa8ty8nks5uhnhegajpzm4sn00y>> .>"
0,0,0,0,"hi, i managed to get the code to sort of work (minus kerberos setup on my machine, but that's not finagle scope). it was my first time being exposed to spnego, so the documentation, specifically what was to fill in as logincontext for the jaasclientsource, was not enough to allow me to use it out of the box. i guess that's more related to knowledge of the spnego protocol and jaas.anyway, thanks !"
0,0,0,0,[![cla assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/twitter/finagle?pullrequest=709) <br/>all committers have signed the cla.
0,0,0,0,served its purpose. closing.
0,0,0,0,"seems calling `transact` would create new client repeatedly, which requests new `cursorstats` metrics every timehttps://github.com/twitter/finagle/blob/develop/finagle-mysql/src/main/scala/com/twitter/finagle/mysql/client.scala#l319"
0,0,0,0,"hi @komsit37! thanks for the detailed report and repro.it seems to me that a reasonable solution would be to move the creation of those stats inside the `cursor` method (specifically, as part of the `cursoredstatement` instance). would you be interested in providing a patch for this?"
0,0,0,0,thanks again @spockz this got merged in https://github.com/twitter/finagle/commit/c0efc7759c64d99d14ca9244dab1b4f064f59782  thanks for the patch. this got merged in https://github.com/twitter/finagle/commit/54c6f2728c2ed6e091909b447e362f04ab6fe81e
0,0,0,0,looks like mysql is returning the aggregate as a new decimal. it should work if you switch to using `row.bigdecimalornull` from `longorzero`.
0,0,0,0,"indeed, thanks!"
0,0,0,0.004207692,"@zhangandyhui hopefully the examples helped.  @jdreyesp did you find out if another location is also logging this message? i only see it happening from this [logger](https://github.com/twitter/finagle/blob/develop/finagle-netty4/src/main/scala/com/twitter/finagle/netty4/channel/channelstatshandler.scala#l16). one possible gotcha is that the classname for objects has a trailing dollar sign ‚Äî ""com.twitter.finagle.netty4.channel.channelstatshandler$"".  @samschlegel any more info here? we've never seen this behavior.  an update ‚Äî we are working on moving to 4.1.28. don't want to jinx it, but the early tests are looking good.  i believe this is now possible.  the implementations here have changed quite a bit since this ticket was filed.  this [got fixed](https://github.com/twitter/finagle/commit/598acc5416798d37e4c796ab115cbda9a34fb787) a little while back. see [this unit test](https://github.com/twitter/finagle/blob/develop/finagle-mysql/src/test/scala/com/twitter/finagle/mysql/integration/typetest.scala#l253-l260) for an example.  as noted [above](https://github.com/twitter/finagle/issues/190#issuecomment-345471631), this was fixed [back in 2014](https://github.com/twitter/finagle/commit/4258d70f60c956e6c6f361f84d84ef1a6e2b38dc)."
0,0,0,0,"hi!no, i found it only in the location you mention, but this is also caught in other locationsindeed, that avoid the channelstatshandler one (thanks :)), but there's two more, netty related:```08:53:35.932 [finagle/netty4-1] warn  com.twitter.finagle - unhandled exception in connection with /127.0.0.1:58886, shutting down connection | io.netty.handler.codec.decoderexception: io.netty.handler.ssl.notsslrecordexception: not an ssl/tls record: ....08:53:35.932 [finagle/netty4-1] warn  i.n.channel.defaultchannelpipeline - an exceptioncaught() event was fired, and it reached at the tail of the pipeline. it usually means the last handler in the pipeline did not handle the exception. | io.netty.handler.codec.decoderexception: io.netty.handler.ssl.notsslrecordexception: not an ssl/tls record: ...```i don't want to get rid of `com.twitter.finagle` nor `defaultchannelpipeline` since i see them important to log in other cases. but i don't want to get my log overflooded by http calls."
0,0.032461538,0,0,"yeah, i see. and i think your more general point stands ‚Äî we probably should not be logging at warning level for bad user input."
0,0,0,0,@dschobel ‚ôªÔ∏è added some more detail in the comment
0,0,0,0.05715,"@prahathess-rengasamy-ck sorry for the long silence, i've been hacking on this for a while, i think it's pretty close to being ready.  i would expect it to land in the next two weeks (i'm on vacation next week)."
0,0,0,0.022,"great thankson fri, aug 17, 2018, 16:42 moses nakamura <notifications@github.com> wrote:> @prahathess-rengasamy-ck <https://github.com/prahathess-rengasamy-ck>> sorry for the long silence, i've been hacking on this for a while, i think> it's pretty close to being ready. i would expect it to land in the next two> weeks (i'm on vacation next week).>> ‚Äî> you are receiving this because you were mentioned.> reply to this email directly, view it on github> <https://github.com/twitter/finagle/issues/701#issuecomment-413982821>,> or mute the thread> <https://github.com/notifications/unsubscribe-auth/aiga5_yvrve93ghsvlqc2t06mowenugaks5uryrlgajpzm4u0ib2>> .>"
0,0.004033333,0,0.0052,"@kevinoliver does this introduce a compile-time breaking change? the new argument added to `transport.options` has a default value, so i don't think it'll break any existing code.  @kevinoliver would it be preferable for me to add another `apply` method on `transport.options` vs documenting a breaking change?"
0,0,0,0,this should be resolved as of https://github.com/twitter/finagle/commit/c404078f4d2ae1dbbbe5799a2aa554fd216b09dd.
0,0,0,0,merged this in https://github.com/twitter/finagle/commit/0316ac8940f056b86e3d5463ba63b6033a539886 thanks again @zackangelo
