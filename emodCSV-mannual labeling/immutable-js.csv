Anger,Sad,Fear,Joy,Comments
0.1,0,0,0.2,"you are right about `setin`, i didn't think you was speaking not about the return type but the type of the second argument. it seems indeed to be the same type of calculation than `getin`, but it seems even more complicated to me, i have no idea if it's possible to enforce an argument type based on a calculation (i suppose it's possible but i'm not even sure ^^)."
0,0,0,0,"[you can get pretty close to the cases most people care about with a few overloads.](http://www.typescriptlang.org/play/index.html#src=interface%20cursor%3ct%3e%20%7b%0d%0a%20%20%20%20getin%3ck1%20extends%20keyof%20t%2c%20k2%20extends%20keyof%20t%5bk1%5d%2c%20k3%20extends%20keyof%20t%5bk1%5d%5bk2%5d%3e(path%3a%20%5bk1%2c%20k2%2c%20k3%5d)%3a%20t%5bk1%5d%5bk2%5d%5bk3%5d%3b%0d%0a%20%20%20%20getin%3ck1%20extends%20keyof%20t%2c%20k2%20extends%20keyof%20t%5bk1%5d%3e(path%3a%20%5bk1%2c%20k2%5d)%3a%20t%5bk1%5d%5bk2%5d%3b%0d%0a%20%20%20%20getin%3ck1%20extends%20keyof%20t%3e(path%3a%20%5bk1%5d)%3a%20t%5bk1%5d%3b%0d%0a%20%20%20%20getin(keypath%3a%20array%3cany%3e%2c%20notsetvalue%3f%3a%20any)%3a%20any%3b%0d%0a%7d%0d%0a%0d%0ainterface%20foo%20%7b%0d%0a%20%20%20%20foo%3a%20%7b%0d%0a%20%20%20%20%20%20%20%20bar%3a%20%7b%0d%0a%20%20%20%20%20%20%20%20%20%20%20%20baz%3a%20%7b%0d%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20yay%3a%20number%0d%0a%20%20%20%20%20%20%20%20%20%20%20%20%7d%0d%0a%20%20%20%20%20%20%20%20%7d%0d%0a%20%20%20%20%7d%0d%0a%7d%0d%0a%0d%0adeclare%20var%20x%3a%20cursor%3cfoo%3e%3b%0d%0a%0d%0alet%20a%20%3d%20x.getin(%5b%22foo%22%5d).bar%3b%0d%0alet%20b%20%3d%20x.getin(%5b%22foo%22%2c%20%22bar%22%5d).baz%3b%0d%0alet%20c%20%3d%20x.getin(%5b%22foo%22%2c%20%22bar%22%2c%20%22baz%22%5d).yay%3b)```tsinterface cursor<t> {    getin<k1 extends keyof t, k2 extends keyof t[k1], k3 extends keyof t[k1][k2]>(path: [k1, k2, k3]): t[k1][k2][k3];    getin<k1 extends keyof t, k2 extends keyof t[k1]>(path: [k1, k2]): t[k1][k2];    getin<k1 extends keyof t>(path: [k1]): t[k1];    getin(keypath: any[], notsetvalue?: any): any;}interface foo {    foo: {        bar: {            baz: {                yay: number            }        }    }}declare var x: cursor<foo>;let a = x.getin([""foo""]).bar;let b = x.getin([""foo"", ""bar""]).baz;let c = x.getin([""foo"", ""bar"", ""baz""]).yay;```  no problemo! unfortunately it means that cursor would need to become generic. you could change it to something like```tsinterface cursor<t = any> {    // ...}```to preserve the current behavior, but i'm not an immutablejs expert."
0,0,0,0.2,"thank you for your pull request and welcome to our community. we require contributors to sign our contributor license agreement, and we don't seem to have you on file. in order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **if you are contributing on behalf of someone else (eg your employer)**, the individual cla may not be sufficient and your employer may need the corporate cla signed.if you have received this in error or have any questions, please contact us at [cla@fb.com](mailto:cla@fb.com?subject=cla%20for%20facebook%2fimmutable-js%20%231471). thanks!  thank you for signing our contributor license agreement. we can now accept your code for this (and any) facebook open source project. thanks!"
0,0,0,0.1,@runtime007 thank you . it works for me . but why it works.@runtime007 it's will cause other issue . eg: backhandler can't work in product env.
0,0.1,0,0.2,"@leebyron do you have any more information on why a deep `tojson` results in slow `json.stringify` performance? i'm trying to debug something and think this might be an issue, but i want to double check my assumptions. thank you!"
0,0,0.1,0.1,why immutable.js makes assumption that collection could have function get which actually works as immutable get?
0.1,0,0,0,"@rgbkrk i already did make a pr for this, i wish someone would just go ahead and merge it"
0,0.1,0,0,"i was looking for something similar. i will just place my modification to @ntgn81 code here. ```import { fromjs, list, map, set } from 'immutable';import { path } from '../types';// mergedeep that merges arrays as sets instead or overwriting it. if only fromjs converted to set instead of list...export function mergedeeparrays (state: any, value: any): any {    const mergearrays = (data: map<string, any>, basepath: path) => {        let next: map<string, any> = data;        data.foreach((v, k) => {            const path = basepath.concat([<string> k]);            if (list.islist(v)) {                if (state.hasin(path)) {                    const current = state.getin(path);                    if (list.islist(current) && !current.isempty()) {                        state = state.setin(path, set(current).merge(v));                        next = next.deletein(path);                    }                }            } else if (map.ismap(v)) {                next = next.setin(path, mergearrays(v, path));            }        });        return next;    };    const updateddata = mergearrays(fromjs(value), []);    return state.mergedeep(updateddata);}export default mergedeeparrays;```"
0,0,0,0.2,after more digging i found that the culprit was missing `symbol.iterator` for array on android. it works after loading polyfill.
0,0.2,0,0,i have the same issue.it seems to me that it does not recognize that it's a record?
0,0,0,0,"for reference if you want to adapt it, or as an alternative solution, my own immutable collections library has (among others) a sorted map, a sorted set _and_ a red-black tree. the sorted map/set collections behave like immutable.js' ordered equivalents by default, or you can supply a custom sorting predicate to have them sort their elements however you like. https://github.com/frptools/collectable"
0,0,0,0,"@leebyron +1, shouldn't this be an optional argument? the get functions for the other immutable collections have optional notsetvalues."
0.1,0.3,0.1,0,"@cormacrelf this one-liner doesn't seem to be quite work because it doesn't insure that the properties are read-only. i've resorted to @dharries's suggestion, but it seems cumbersome to have to create an instance of the record to get its type. @leebyron is there any better alternative to @dharries's suggestion?"
0,0,0,0,"i don't know about the memory leak, but it seems to me you're creating quite a few intermediate objects in the reducer. as it stands, every call to `.map()` and `.setin()` creates a new instance. have you tried using `.withmutations()` and `.foreach()`?```javascriptcase socket_messsage:    if(action.payload.message_type == ""coordinates_update"") {        return state.withmutations(newstate => {            action.payload.messages.foreach(({ id, coordinates }) => {                newstate.get(""results"").foreach((data, entities_id) => {                    if(data.indexof(id) > -1) {                        newstate.setin(                            [""entities"", entities_id, """" + id, ""coordinates""],                            fromjs(coordinates)                        );                    }                });                          });        });    }```also, i think you could try a `seq` for the inner loop, although i'm not yet familiar with them enough to confidently say whether there'd be any performance benefit in this case.```javascriptnewstate.get(""results"").toseq()    .filter(data => data.indexof(id) > -1)    .foreach((data, entities_id) => {        newstate.setin([""entities"", entities_id, """" + id, ""coordinates""], fromjs(coordinates));    })```"
0,0,0,1,woo! i could also use this.
0.1,0.2,0.1,0,"thanks, i ended up trying out both of your solutions, they both still have a memory hit. not as much as my original code tho. memory usage still grew to ~ 2gb after about an hour. i might just have to take out immutable from the app."
0,0,0,0,@codingjbz do you have any links regarding the backhandler bug? is it introduced by including the core-js polyfills?
0,0,0,0.9,@scottmas awesome! @leebyron any interest in a pr adding getter support?
0,0.2,0.8,0,sorry. i want to that is tojson(). tojson() is shallow convert :)
0.3,0,0.1,0,"@runtime007 - your solution works, but why is it needed, and only on android?"
0,0.2,0,0,any updates on this one?im using 4.0.0 rc9 and have the same issue with merge!
0,0,0,0,this would be a very useful fix for our typescript projects as well.
0,0.1,0.2,0,"anybody have an idea how to best let flow know about that. redeclaring iterable would afaik not do much in and of itself, as immutable would internally still use its own version."
0.2,0.1,0,0,"the `_map` inside is not the actual map. `orderedmap` is just a `_map` with a `_list` inside that stores the actual order, but the wrapped `_map` is not ordered at all.so basically you're looking at the wrong thing with your debug tools.it is unusual that `_list` has an `undefined` element within, perhaps that could cause a memory leak over a very long time if `undefined` elements keep staying.  i have a similar issue with `updatein` in our semi-complex codebase. i have outlined in #1484 .  @leebyron i have used the latest flow definitions from v9 and i'm getting errors like these```> flow checkerror: src/company/selectors/runtimeprocessselectors.js:52 52:   state.updatein(['processes', 'bykey'], updater);             ^^^^^^^^ property `updatein`. property not found in 32: export type rootstate = recordof<rootstateprops>;                                      ^^^^^^^^^^^^^^ rootstateprops. see: src/company/selectors/rootselectors.js:32error: src/company/selectors/runtimesessionselectors.js:84 84:   state.updatein(['session', 'pendingactions'], actions => actions.concat(addactions));             ^^^^^^^^ property `updatein`. property not found in 32: export type rootstate = recordof<rootstateprops>;                                      ^^^^^^^^^^^^^^ rootstateprops. see: src/company/selectors/rootselectors.js:32```see #1484 also, rootstate is defined like it was there.that is, yes, i copied and pasted the latest flow definitions (with the subtyping changes) from github and are using them against the rc9 on npm and it makes no difference."
0.2,0.7,0.7,0,no solution?
0,0,0,0,maybe fixed by #1464 .  maybe fixed by #1464 .  maybe fixed by #1464 .
0,0,0,0.1,"tested. this reduces the time spent ""compiling..."" to 1s with immutable 4.0. this is available on the skiplibcheck branch: https://github.com/rovanion/create-react-app-ts-slowdown-demo/tree/skiplibcheckinteresting thing: the time spent ""compiling..."" seems to match the time spent by tsc on an initial build which would indicate that the crat-template does a complete compile each time. the initial build time using only tsc goes from 2.61s with 3.8.2 to 9.83s with 4.0.0-rc.9, that is without skiplibcheck."
0,0,0,0.2,"thank you for your pull request and welcome to our community. we require contributors to sign our contributor license agreement, and we don't seem to have you on file. in order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **if you are contributing on behalf of someone else (eg your employer)**, the individual cla may not be sufficient and your employer may need the corporate cla signed.if you have received this in error or have any questions, please contact us at [cla@fb.com](mailto:cla@fb.com?subject=cla%20for%20facebook%2fimmutable-js%20%231489). thanks!  thank you for signing our contributor license agreement. we can now accept your code for this (and any) facebook open source project. thanks!"
0,0,0,0,@dreallday check to make sure you're not doing any `tojs()` conversions in `mapstatetoprops` https://redux.js.org/recipes/using-immutable.js-with-redux#never-use-tojs()-in-mapstatetoprops
0,0.2,0.1,0,"this doesn't appear to work entirely. some of the links point to /docs/#/list and some point to /docs/list with the latter not working. you can see here: http://immutable-docs.herokuapp.com/docs/the sidebar works but not the main site.  this makes it very hard to use immutable when you can't even see what functions are available. @flarnie: as the last contributor to the repo can you have someone take a look at this  for anyone who sees this and needs access to the docs, i pulled in https://github.com/facebook/immutable-js/pull/1444 and uploaded the files here: https://immutable-docs.herokuapp.com/docs/"
0,0.2,0.2,0.1,"thanks @flarnie for taking a look.tl;dr: looks like a falseish alarm.i was still able to repro, but then on a whim decided to try on incognito mode... and it started working. i figured out that one of extensions blocks jsdelivr.net (which is loading the react runtime).however, instead of breaking in any of the usual ways, it does the whole redirect to https://facebook.github.io/list instead of https://facebook.github.io/#list.allowing jsdelivr through gets the docs working again.so, there _is_ still a bug in that the html that is generated without javascript has the incorrect links. however, even if you manually put in the correct url, the docs don't load because the website is really a react app. if i were you folks i would either close this as a won't-fix, or add some kind of <noscript> warning if loading react from the cdn fails. or move the javascript file to a 1st party url so it's not blocked by default."
0,0.3,0,0,@leebyron doesn't look like this went live. is there a syntax error i missed?https://facebook.github.io/immutable-js/docs/#/orderedset/subtract
0,0,0,0.3,"related to 4.0: is there a schedule for an official 4.x release? i've noticed the milestone has been complete for some time. apologies if this information is listed elsewhere, but i haven't been able to track it down."
0.1,0.2,0.1,0,i hadn't seen this had been reported and created a test case to reproduce it. it's here for future reference -> https://github.com/sdeleon28/rnandroidimmutablebug  potential quickfix for future lost travelers https://github.com/facebook/react-native/issues/4676#issuecomment-340290485
0,0,0,0,"it's probably a typo, the `get` function is quite redundant if you have a record type. you would do `record.prop` or `record[prop]` over `record.get('prop', undefined)`. maybe there are some optimizations i'm not aware of with respect to the record type that makes this necessary but other than that, a record is like a specialized map so, the interface shouldn't really be different.**edit: ** of course i was wrong, see https://github.com/facebook/immutable-js/pull/1135"
0,0,0,0.6,"it would be great to merge #1464 before 4.0  @leebyron it would be really good to have this, it's causing a bit of an issue for us. we have to put // $flowfixme above all our updatein's which has caused some very real bugs for us."
0,0,0,0.2,"thank you for your pull request and welcome to our community. we require contributors to sign our contributor license agreement, and we don't seem to have you on file. in order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **if you are contributing on behalf of someone else (eg your employer)**, the individual cla may not be sufficient and your employer may need the corporate cla signed.if you have received this in error or have any questions, please contact us at [cla@fb.com](mailto:cla@fb.com?subject=cla%20for%20facebook%2fimmutable-js%20%231496). thanks!  thank you for signing our contributor license agreement. we can now accept your code for this (and any) facebook open source project. thanks!"
0,0,0.2,0,@leebyron is aware https://twitter.com/leeb/status/976862384794095616 i'm confident it will happen but we'll have to hang tight for a while.
0,0.8,0.1,0,"it's unfortunate this is blocking us from using the flow definitions on `^3.8.x` and there doesn't seems to have a fix for it other than upgrading to v4, which is not an option for us atm.i tried all the mentioned solutions, but none of them worked, i keep having the flow error.please let me know if there is a workaround for this while using `^3.8.x` !  ok i could work around this issue without having to update to `4.0.0`, which i can't do atm.here are the instructions: https://gist.github.com/fabiomcosta/617ef69320a5539ab5cdc510b0b648af"
0,0.2,0,0,"ok i could work around this issue without having to update to 4.0.0, which i can't do atm.see my comment on https://github.com/facebook/immutable-js/issues/1308#issuecomment-375846684"
0.2,0.2,0.5,0,"@ishanyang sorry, what you mean?"
0,0,0,0.2,thank you for signing our contributor license agreement. we can now accept your code for this (and any) facebook open source project. thanks!
0,0,0.1,0,the old version has iskeyed as a static on iterable. what's the standard way to write code that will work with 3.x and 4.x? typescript seems to be complaining a bit.
0,0,0,0,"assuming the one-liner is correct, should it not be added to the exported typescript definitions?"
0,0,0,0.2,"same here, did almost the same locally as you guys. it's not that hard actually not implement that. but the result is just damn useful. +1 from me for this"
0,0,0.1,0,is anyone else concerned about .toarray() working differently in the new version? i would need to change 100s of places to call .tolist().toarray() instead of just .toarray() like in 3.x.
0,0,0,0.1,"it would be great to get a comment about this. this kind of extension is valuable. if it is being intentionally cut, it would be helpful to have official confirmation of that."
0,0.3,0,0,"hi, it's been several months since this was closed, and still no release. i'd like to re-open this issue."
0,0.1,0,0.1,had same problem here but fixed with kentor's advice. btw does anyone know 'why' it happened?
0,0,0,0,here's what i mean (i'd make a pr but i probably shouldn't target current master with this change based on 3.8.2 tag and there are no other suitable branches)https://github.com/tomis/immutable-js/commit/7521908c61e3c6c8f475dc466f216627a1a7b274
0,0,0,0,"this issue can be fixed using the type recordof<t>, more details here: https://github.com/facebook/immutable-js/issues/1240"
0,0,0.1,0.1,+1 to wishing and hoping for a release date for v.4.0
0,0,0,0,"the module [transit-immutable-js](https://www.npmjs.com/package/transit-immutable-js) is a great answer to this. you still have to manually maintain the list of records, but it is a great improvement from having to write a big reviver yourself."
0,0.9,0.2,0,sorry! i'm wrong about this.
0,0,0,0,"@athomann none, it was the intermediate states that immutable created.at the time i updated one map in state ~10 times a second.----i ended up ripping out immutable, unfortunately. went with `{ merge, assign } from 'lodash'`"
0,0,0.2,0,is this going to graduate from rc to being standard? no problem with v4.re unpkg: do you plan to use the ?module approach?>  https://unpkg.com/immutable@4.0.0-rc.9?module.. or do you prefer direct reference to dist/>  https://unpkg.com/immutable@4.0.0-rc.9/dist/immutable.es.js
0.1,0.2,0,0,"wow.  i am not having a good time with `record` in node.```bash$ node> const {record, map} = require('immutable-js')undefined> const a = new record({a:null})undefined> const a = new a({a: new map()})undefined> a.anull```  oh, it's `immutable`, not `immutable-js`.  whoops.  did this ever get documented?  i'm seeing a similar problem but for `name` without the underscore now.```$ node --versionv8.4.0$ node> const {record} = require('immutable-js')undefined> const a = new record({name: ''})undefined> const a = new a({name: 'bob'})error: can't call set on an immutable record.    at invariant (/users/nick/documents/github/turbo/node_modules/immutable-js/dist/immutable.js:182:29)    at record.set (/users/nick/documents/github/turbo/node_modules/immutable-js/dist/immutable.js:1360:15)    at new record (/users/nick/documents/github/turbo/node_modules/immutable-js/dist/immutable.js:1261:44)    at repl:1:11    at contextifyscript.script.runinthiscontext (vm.js:44:33)    at replserver.defaulteval (repl.js:239:29)    at bound (domain.js:301:14)    at replserver.runbound [as eval] (domain.js:314:12)    at replserver.online (repl.js:440:10)    at emitone (events.js:120:20)```  oops.  i was using `immutable-js` instead of `immutable`."
0,0,0.1,0,"indeed, maybe @leebyron could help clarify what the strategy with immutable.js is. immutable is a great library and i think we can be thankful for it. moving forward, however, it would be nice to get some idea on the vision. this repo really feels abandoned and not maintained any longer.the same feeling was already present in the past:[https://github.com/facebook/immutable-js/issues/1215](https://github.com/facebook/immutable-js/issues/1215)[https://github.com/facebook/immutable-js/issues/1295](https://github.com/facebook/immutable-js/issues/1295)but then, all of a sudden, there was some activity for a couple of weeks or so, before it fell asleep again. could we have some clarity, if there are plans to move this repo forward. that would be great. thank you."
0,0,0,0.8,"great question! though i should point out that it’s a duplicate #1494. really hope we get some movement on this soon.  fixes #1431  @s2s2kim it happened with the change over to react 16’s “fiber” renderer. i suspect it is somehow related to the fundamental changes in rendering arrays and iterables that allows for `react.fragment` and the like, but that’s just speculation on my part.for maintainers, note that this issue is solved and can be closed."
0,0,0,0.1,"ok :-( i suppose if react accepted the results of a call like```javascript<div>  {map({    name: 'andy'  }).map((item, key) => <div key={key}>something</div>)}</div>```then it would be no problem. we could just remove the code :)"
0,0,0,0.1,"@leidegre i think that could be useful. at least knock out some of the most important bugs and see if we can fix some types.then we can also publish builds as we go so others can just swap out their dependency string for `""immutable""` in package.json and we can get feedback from those who have posted issues on whether they are resolved. in other cases where i’ve had to use a fork, in order to avoid the overhead of npm publishing, i’ve also created a `<repo name>-build` repo that just has the built files. i then refer to that repo directly along with the short commit hash in the package.json, i.e. `""react-dom"": ""github:brandcast/react-dom-built#e673e48""`"
0.2,0.1,0.1,0,"why tuple for updatein, what shall we do if we resolve keypath dynamically ? :confused:"
0,0.1,0.2,0,"@acusti can you manage this? i can commit about 1-2 hours on a weekly basis, no problem but that's about it."
0,0,0,0,"@leidegre i created a fork at [brandcast/immutable-js](https://github.com/brandcast/immutable-js), and am pushing up built versions of `immutable` with bug fixes to [brandcast/immutable-js-built](https://github.com/brandcast/immutable-js-built).so far, i’ve fixed #1438 and #1490, and i merged #1464, which i’m hoping will help with flow issues mentioned by @donkeybonks and others. to try out the fixes, replace your immutable dependency string in `package.json` with:```json    ""immutable"": ""brandcast/immutable-js-built#aa94985"",```note that i needed to clear out my `yarn.lock` file and `node_modules` and install from scratch to get the proper version.  @evhaus i fixed this issue in a fork i’m maintaining to help get v4 over the finish line. if you would find it useful, you can install a build now that includes the fix by replacing your immutable dependency string in `package.json` with:```json    ""immutable"": ""brandcast/immutable-js-built#aa94985"",```note that i needed to clear out my `yarn.lock` file and `node_modules` and install from scratch to get the proper version.  this issue is fixed in a fork i’m maintaining to help get v4 over the finish line. if you would find it useful, you can install a build now that includes the fix by replacing your immutable dependency string in `package.json` with:```json    ""immutable"": ""brandcast/immutable-js-built#aa94985"",```note that i needed to clear out my `yarn.lock` file and `node_modules` and install from scratch to get the proper version."
0,0,0,0,check that all_users exist before
0,0,0,0.1,hey all - @robinhood is also a big user of immutable.js and i still plan on releasing immutable v4.i'll be working on the next release candidate this week to establish remaining issues  @acusti can you make sure any issues you've fixed on your fork are reflected in pull requests in this repo? you can mention them here as well to ensure they get the correct focus.thanks so much for building up a list of issues
0,0.4,0.2,0,"sorry, this isn't an issue with this library.  thanks for the suggestion, but i believe this has been discussed here before. i suggest subclassing list with the custom behavior if you need, however tracking any additional data per instance results in every operation being slower and consume more memory since instances are ideally extremely thin wrappers around a root node. because most users prefer higher performance over additional features, this is a good example of something that would make for a good companion library  immutable.js's data structures are not a perfect mirror of javascript's object and array and this is one such example. immutable list can only contain indexed entries and not arbitrary additional properties. if arbitrary properties are important to you, i suggest using a map, which can also contain numeric keys.  merging into #1494   unfortunately there are no plans to release new builds of v3 - all efforts are going towards a v4 release, where this issue has been fixed.i believe the third-party flow types repo for immutable-js has corrected this issue?  this is fixed in the master branch.thanks for going to the detail of including screenshots, however in the future please direct that effort towards submitting a pull request!  great idea - in fact everywhere values is referenced (sometimes as t) this should be the correct behavior.  thanks for the report - it looks like these examples were changed a while back, i'll update them  this has been fixed in the v4 builds  closing since it's fixed in the v4 builds (this is a new method for v4)  cool idea, i'm open to prs for this  it sounds like you're doing reasonable things so i'll close this issue (trying to use gh issues to only track bugs)  thanks! i've merged all three of those prs and will keep working on the next release  i also just added all the issues you tracked into the v4.0 milestone https://github.com/facebook/immutable-js/milestone/1  unfortunately this seems to be a tradeoff with typescript between correctness and performance. the v4 typescript definitions are dramatically better, however this results in typescript spending more time doing type checking.  unfortunately we're only tracking issues for the v4 release and bugs that reproduce against master. please file a new issue if you find a similar issue with a latest v4 release candidate  i definitely agree, thank you for this improvement!  is this a standard method on other set datastructure apis in other common languages? i'd be happy to consider this if it followed other common api patterns.if not, then i think this could be a good standalone micro-library  make sure you're using the latest version - i cannot reproduce this issue in the master branch since zip is defined in the types file: https://github.com/facebook/immutable-js/blob/master/type-definitions/immutable.d.ts#l1848-l1863  makes sense, thanks for the fix  thanks, this is a good step forward.  thanks!"
0,0.8,0,0,"unfortunately even when providing a custom tojson on the record, it is not used when converting containers deeply. for example:```javascriptclass coord extends record({  x: 0,  y: 0}) {  tojson() {    return [this.x, this.y];  }}const coordinates = list.of(new coord({x: 1, y: 1}), new coord({x: 2, y: 2}));console.log(""coordinates"", coordinates.tojs());```outputs```coordinates [{x: 1, y: 1}, {x: 2, y: 2}]```instead of```coordinates [[1, 1], [2, 2]]```that makes the suggestion in the docs to provide a tojson quite the footgun."
0,0,0,0.2,"thank you for your pull request and welcome to our community. we require contributors to sign our contributor license agreement, and we don't seem to have you on file. in order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **if you are contributing on behalf of someone else (eg your employer)**, the individual cla may not be sufficient and your employer may need the corporate cla signed.if you have received this in error or have any questions, please contact us at [cla@fb.com](mailto:cla@fb.com?subject=cla%20for%20facebook%2fimmutable-js%20%231537). thanks!  thank you for signing our contributor license agreement. we can now accept your code for this (and any) facebook open source project. thanks!"
0,0,0,0.2,"i have found that the guava library (by google, for java) has a set primitive `getonlyelement`, and java 8 streams has one named `onlyelement`. there is, in general, no consistency among languages broadly. the name `singleton` might actually be confusing, since a method of that name is sometimes used for the formation of a set from a single element.i still think there is a strong enough need to justify the addition of a method. i would suggest the name `getonlyelement`, as it is less likely to be confusing."
0,0.2,0.1,0,"i wanted this functionality in a couple places, but didn't quite realize how much it would impact elsewhere in the existing application as i was using pojos as ""merge barriers"" in a bunch of places. i'm trying to square how to mix both functionality now. now that pojos are no longer ""merge barriers"", i'm wondering if there needs to be some other way to set explicit ""barriers"" when using something like `mergedeep`?"
0,0,0.1,0,"there is a pr that addresses this at #1539, still waiting on feedback."
0,0,0.2,0,"we had the same problem when we decided to implement flow few month ago. after struggling for hours (days...), we choose to move for a more functionnal approach by creating functions like:`getpersonname(person: ?person): string { ... }`.it works great so far.  @quarryman yeah, exactly. typing subclass is a complex and long standing issue with flow and immutable record, so we choose to go for functional all the way.it might be your solution if you need to go forward... you will benefits from all the cool aspect of the functional approach like composition, no more `getname from undefined is not a function`, etc."
0,0,0,0,any news? :)
0,0,0,0.7,sounds good. should i close this?
0,0,0,0.9,nice. absolutely want this
0,0,0,0.2,"thank you for your pull request and welcome to our community. we require contributors to sign our contributor license agreement, and we don't seem to have you on file. in order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **if you are contributing on behalf of someone else (eg your employer)**, the individual cla may not be sufficient and your employer may need the corporate cla signed.if you have received this in error or have any questions, please contact us at [cla@fb.com](mailto:cla@fb.com?subject=cla%20for%20facebook%2fimmutable-js%20%231543). thanks!  thank you for signing our contributor license agreement. we can now accept your code for this (and any) facebook open source project. thanks!"
0,0,0.2,0,did this work on a previous release?
0,0,0,0,"yes, the same error is logged using [3.8.2](https://github.com/facebook/immutable-js/releases/tag/v3.8.2). node 10.4.1macos 10.13.5"
0.1,0,0,0.5,sure that makes sense. but i guess it should at least be mentioned in the docs so people don't accidentally run into this problem.
0,0,0,0.2,there's a fix here https://github.com/facebook/immutable-js/pull/1549
0,0,0,0,any news?
0,0,0,0,@leebyron 3 more prs open for 4.0https://github.com/facebook/immutable-js/pull/1549https://github.com/facebook/immutable-js/pull/1544https://github.com/facebook/immutable-js/pull/1543
0,0.2,0,0.4,"@leebyron hello. you mention `recordof()` which seems like solution for our problem, but i can't find out how to arrange that together. we are trying to add flow types to slate editor.given the source of class `class value extends record(defaults) { ... }` where defaults is some shape.https://github.com/ianstormtaylor/slate/blob/master/packages/slate/src/models/value.js#l34we are experimenting to declare class types as:```javascriptdeclare export class value extends record<{  data: map,  decorations: tobedefined,  document: document,  history: history,  schema: schema,  selection: range}> {  static fromjson(json: value | object): value  ...}```this is one valid syntax which flow allow us, but any checking of record properties, or functions doesn't work.is it even possible to inherit from this kind of generic?"
0.2,0,0,0,"i've somehow renamed the `.d.ts` file, so will close this messy pr and open a new one. won't use gh's onsite file editing this time!"
0.1,0.5,0.2,0,is there an eta for 4.x exiting release candidate builds?  it's unfortunate that just installing gives you a 3.x build where this is broken.
0,0.4,0.1,0,"i ran into a similar issue recently.from the [docs](http://facebook.github.io/immutable-js/docs/#/map/mergedeepwith)> like mergedeep(), but when two non-collections conflict, it uses the merger function to determine the resulting value.the key thing to note there is 'non-collections'. if you were to step through your merger function you would see that it isnt even called for key `y`, as it is identified as a collection. to handle what you're trying to do have a look at using `mergewith`, and then identifying your key using something like:```const obj3 = mergewith((oldvalue, newvalue, mergekey) => {	if (mergekey === 'y') {"
0,0,0,0,@leebyron - can you this merged? there is now a problem with using the immutable library with typescript.
0,0,0,0.8,looks solid to me!
0,0,0,0,i found the latest 3.x docs (from march 2017) on wayback machine here: https://web.archive.org/web/20170301035953/https://facebook.github.io/immutable-js/docs/#/
0.1,0,0,0,"did you check out the redux documentation on immutable-js use? https://redux.js.org/recipes/using-immutable.js-with-redux -- it answers most of these.says to limit use of `tojs`, not `fromjs`.record is nice in that it only allows the types that you specify which fields the instance can have and set defaults for them.as always, it depends what you're doing with the nested objects; but generally yes, you should make your nested objects immutable as well so that you gain the performance advantage of having the immutable data structure when doing a merge or other operation (e.g., compare) that benefits from immutability (not to mention your peace of mind from using immutable data structures).  as far as i know there is not another way (with this library) to make the objects immutable, without actually using an immutable data structure. you could lock the objects with `object.freeze`.. but you're just adding more complexity. as brantron said, you could use `fromjs` which will convert inner objects to maps and lists automatically. however, you can't just apply it on your top-level map with nested javascript objects or it's not going to convert them, the input into `fromjs` needs to be a javascript object itself."
0,0,0,0.4,"@asazernik thanks for taking a peak, pushed a commit."
0,0,0,0.2,"thank you for your pull request and welcome to our community. we require contributors to sign our contributor license agreement, and we don't seem to have you on file. in order for us to review and merge your code, please sign up at https://code.facebook.com/cla. **if you are contributing on behalf of someone else (eg your employer)**, the individual cla may not be sufficient and your employer may need the corporate cla signed.if you have received this in error or have any questions, please contact us at [cla@fb.com](mailto:cla@fb.com?subject=cla%20for%20facebook%2fimmutable-js%20%231558). thanks!  thank you for signing our contributor license agreement. we can now accept your code for this (and any) facebook open source project. thanks!"
0.4,0,0.1,0,why should `airviewmodel` be made into a map? how is `fromjs` supposed to know what to do with it? documentation specifically says it converts plain js objects and arrays.
0,0.1,0.1,0,is there any way a non-involved person like myself could help getting this released? our team would like to transition to immutablejs but the problems with typing in 3.x are preventing us from making the leap. i'd be very willing to work on low-hanging fruit if it can help get 4.x out the door.
0,0,0,0.6,i would also love to lend a hand. i think a lot of folks would love to start using 4.x
0,0,0.1,0,"is there a milestone for what is blocking a 4.0 release? presumably anything that's not breaking can wait until after a 4.0 is cut and go into a follow-up minor or patch release.edit: duh - i didn't actually read the issue very well, milestone is here: https://github.com/facebook/immutable-js/milestone/1"
0.2,0,0.1,0,any intention to work on this ?
0.3,0,0.1,0,do you know who the right person to review this is @leebyron?
0,0,0.2,0,"@donkeybonks , did #1464 fix this or not?can we close this issue if it is indeed fixed?  @donkeybonks , did #1464 fix this or not?can we close this issue if it is indeed fixed?"
